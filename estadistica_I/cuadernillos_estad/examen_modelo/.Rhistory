pbinom(k, n, 1/n)
prob_total = p * pnbinom(k, n, 1/n)
#P(X<k)
pnbinom(k, n, 1/n)
pnbinom(k, n, 1/n)
?pnbinom
prob_total = p * 1-pnbinom(k, n, 1/n)
1-pnbinom(k, n, 1/n)
pnbinom(k, n, 1/n)
metodoNuevo = rnorm(10, mu = 5.724, sd=0.35)
'rnorm'
?rnorm
metodoNuevo = rnorm(10, mean= 5.724, sd=0.35)
rnorm(10, mean= 5.724, sd=0.35)
rnorm(10, mean= 5.724, sd=0.35)
rnorm(10, mean= 5.724, sd=0.35)
rnorm(10, mean= 5.724, sd=0.35)
rnorm(10, mean= 5.724, sd=0.35)
sd(metodoNuevo)
sims_z = (metodoNuevo - mean(metodoNuevo))/0.35-sd(metodoNuevo))
mean(metodoNuevo)
sims_z = (metodoNuevo - mean(metodoNuevo))/(0.35-sd(metodoNuevo))
(metodoNuevo - mean(metodoNuevo))/(0.35-sd(metodoNuevo))
var.test(sims_z, conf.level = 0.99)
prop.test
?prop.test
sd(metodoNuevo)
#vemos q sigue una distribucion normal
#0.005- 0.99 -0.005
#P(z < X_gorrito - mu / sd^2/n) < z) = 0.99
z = c(qnorm(0.005), qnorm(0.995))
z
#mu = X_gorrito - (z * sd^2/n)
5.724 - (z * (0.35^2)/10)
mu
?qchisq
var(metodoNuevo)
#Casos de fallos hasta r-ésimo acierto -->Binomal(r,p)
# r--> hasta k ; p_n--> 1/n ó p--> prob de q se la haya llevado otra persona
#Vuelve y hay 10 copas, comprueba hasta 7 copas
n=10
k=7
#P(X<k)
pnbinom(k, n, 1/n)
p=0.3 #prob de q algn la haya cogido es de 30%
prob_total = p * pnbinom(k, n, 1/n)
prob_total
z = c(qchisq(0.005, df = 9), qnorm(0.995, df = 9))
z = c(qchisq(0.005, df = 9), qnorm(0.995, df = 9))
source("utils.r")
metodoNuevo = rnorm(10, mean= 5.724, sd=0.35)
sims_z = (metodoNuevo - mean(metodoNuevo))/(0.35-sd(metodoNuevo))
#-------------VARIANZA MUESTRAL------------
#H0: var > 0.4
#Ha: var < 0.4
#Estadístico --> Chi cuadrado
#0.005- 0.99 -0.005
z = c(qchisq(0.005, df = 9), qnorm(0.995, df = 9))
?pchisq
#Estadístico --> Chi cuadrado
#0.005- 0.99 -0.005
z = c(qchisq(0.005, df = 9), qchisq(0.995, df = 9))
#P(z < 9*var(metodoNuevo)/sigma2 < z) = 0.99
var_muestral = var(metodoNuevo)
sigma2 = 9*var_muestral/z
9*var_muestral/z
sigma2 = 9*var_muestral/(-z)
9*var_muestral/(-z)
sigma2 = 9*var_muestral/(z)
qchisq(0.005, df = 9)
qchisq(0.995, df = 9)
9*var_muestral/(z)
sigma2 < 1.6
?dexp
# 0.7 vip y 0.3 estandar
# dexp(labmda) --> media = 1/labmda
0.7 * dexp(1/5) + 0.3*dexp(1/10)
# 0.7 vip y 0.3 estandar
# dexp(labmda) --> media = 1/labmda
tiempo_espera = 0.7 * dexp(1/5) + 0.3*dexp(1/10)
dexp(1/5)
dexp(1/10)
pexp(4)
dexp(4)
pexp(4)
pexp(4)
pexp(4)
pexp(4)
(0.7*pexp(4)) + 0.3*pexp(4))
(0.7*pexp(4)) + 0.3*pexp(4)
1 - pexp(4)
#P(X>4) = 1 - P(X<4)
1 - (0.7*pexp(4, 1/5)) + 0.3*pexp(4, 1/10)
#P(X>4) = 1 - P(X<4)
1 - (0.7*pexp(4, 1/5) + 0.3*pexp(4, 1/10))
(0.7*pexp(4, 1/5) + 0.3*pexp(4, 1/10))
0.7*rexp(7, 1/5) + 0.3*rexp(7, 1/10)
0.7*rexp(7, 1/5)
0.3*rexp(7, 1/10)
mean(0.7*rexp(7, 1/5) + 0.3*rexp(7, 1/10))
sims < 4
sims = 0.7*rexp(7, 1/5) + 0.3*rexp(7, 1/10)
sims < 4
sum(sims < 4)/7
dexp(1/2)
plot(0:100, f_a)
exp(2)
plot(exp(2))
?rexp
#M: #tiempo en el que terminan los trabajos = max(a,b,c)
n=100
trabajoA = rexp(n, 1/2)
plot(trabajoA)
rexp(n, 1/2)
plot(x:10, trabajoA)
plot(0:10, trabajoA)
plot(trabajoA.length, trabajoA)
plot(0:n, trabajoA)
?max
pmax()
?pmax
#Xa: tiempos que transcurren hasta finalizar trabajo A (2)
#Xb: tiempos que transcurren hasta finalizar trabajo B  (3)
#Xc: tiempos que transcurren hasta finalizar trabajo C  (5)
#M: #tiempo en el que terminan los trabajos = max(a,b,c)
n=100
trabajoA = rexp(n, 1/2)
trabajoB = rexp(n, 1/3)
trabajoC = rexp(n,1/5)
pmax
rexp(n, 1/0.95)
pmax(simsM)
simsM = rexp(n, 1/0.95)
pmax(simsM)
pmax(simsM)
plot(0:4, simsM)
plot(0:4, simsM)
plot(simsM)
hist(simsM)
trabajoA = rexp(n, 1/2)
trabajoB = rexp(n, 1/3)
trabajoC = rexp(n,1/5)
pmax(trabajoA, trabajoB, trabajoC)
hist(trabajoA)
hist(trabajoA)
hist(trabajoB, add= TRUE)
?hist
hist(trabajoA)
hist(trabajoB, add= TRUE,col=2)
library("ggplot2")
library("ggplot2")
ggplot(trabajoA) + geom_histogram()
hist(trabajoA)
hist(trabajoB, add= TRUE,col=2)
hist(trabajoB, add= TRUE,col=2, plot=TRUE)
hist(trabajoA, plot=TRUE)
hist(trabajoB, add= TRUE,col=2)
hist(trabajoA)
hist(trabajoA)
hist(trabajoB)
hist(trabajoC)
x <- rnorm(1000)    # Primer grupo
y <- rnorm(1000, 1) # Segundo grupo
hist(x, main = "Dos variables", ylab = "Frecuencia")
hist(y, add = TRUE, col = rgb(1, 0, 0, alpha = 0.5))
source(utils.R)
source(utils.R)
source("utils.R")
source("utils.R")
hist(trabajoA)
hist(trabajoB, add = TRUE)
hist(x, main = "Dos variables", ylab = "Frecuencia")
hist(y, add = TRUE, col = rgb(1, 0, 0, alpha = 0.5))
plot.new()
hist(trabajoA)
hist(trabajoB, add = TRUE)
pmax(mean(trabajoA), mean(trabajoB))
mean(trabajoA)
mean(trabajoB)
pmax(trabajoA)
sort(trabajoA)
sort(trabajoA)[n, ]
sort(trabajoA)[,n ]
sort(trabajoA)[100, ]
sort(trabajoA)[99, ]
a_ordenado = sort(trabajoA)
a_ordenado
plot(1:100, a_ordenado)
hist(trabajoA)
hist(trabajoB, add = TRUE)
hist(trabajoC, add = TRUE)
?hist
hist(simsM)
library(readr)
iris <- read_csv("iris.csv")
View(iris)
#Sepal.Length ~Petal.Length + Species
ggplot(iris, aes(x=Species))
#Sepal.Length ~Petal.Length + Species
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ geom
#Sepal.Length ~Petal.Length + Species
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ geom_boxplot()
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ stat_summary()
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ stat_summary() +
stat_summary(geom = 'line', aes(y=Petal.Lenth))
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ stat_summary() +
stat_summary(geom = 'line', aes(y=Petal.Length))
print("concluimos q no hay interacciones")
my_model = lm(Sepal.Length ~Petal.Length + Species, iris)
lm(Sepal.Length ~Petal.Length + Species, iris)
summary(my_model)
confint(my_model)
plot(simsM)
hist(trabajoB, add = TRUE)
hist(trabajoB
)
hist(trabajoC
)
variaciones(1,4)
#Casos de fallos hasta r-ésimo acierto -->Binomal(r,p)
# r--> hasta k ; p_n--> 1/n ó p--> prob de q se la haya llevado otra persona
#Vuelve y hay 10 copas, comprueba hasta 7 copas
n=10
k=7
#P(X<k)
pnbinom(k, n, 1/n)
p=0.3 #prob de q algn la haya cogido es de 30%
prob_total = 1-p * pnbinom(k, n, 1/n)
prob_total
#Casos de fallos hasta r-ésimo acierto -->Binomal(r,p)
# r--> hasta k ; p_n--> 1/n ó p--> prob de q se la haya llevado otra persona
#Vuelve y hay 10 copas, comprueba hasta 7 copas
n=10
k=3
#P(X<k)
pnbinom(k, n, 1/n)
p=0.3 #prob de q algn la haya cogido es de 30%
prob_total = 1-p * pnbinom(k, n, 1/n)
prob_total
prob_total = 1-p * pnbinom(k, n, 1/n)
prob_total
#Vuelve y hay 10 copas, comprueba hasta 7 copas
n=10
k=3
#P(X<k)
pnbinom(k, n, 1/n)
p=0.3 #prob de q algn la haya cogido es de 30%
prob_total = 1-p * pnbinom(k-1, n, 1/n)
prob_total
pnbinom(k-1, n, 1/n)
1-p
1-p * pnbinom(k-1, n, 1/n)
pnbinom(k-1, n, 1/n)
pnbinom(k-1, n, 1/n) *0.7
prob_total = (1-p) * pnbinom(k-1, n, 1/n)
prob_total
k=9
prob_total = (1-p) * pnbinom(k-1, n, 1/n)
prob_total
# 0.7 vip y 0.3 estandar
# dexp(labmda) --> media = 1/labmda
tiempo_espera = 0.7 * dexp(1/5) + 0.3*dexp(1/10)
#P(X>4) = 1 - P(X<4)
1 - (0.7*pexp(4, 1/5) + 0.3*pexp(4, 1/10))
sims = 0.7*rexp(7, 1/5) + 0.3*rexp(7, 1/10)
sum(sims < 4)/7
# 0.7 vip y 0.3 estandar
# dexp(labmda) --> media = 1/labmda
tiempo_espera = 0.7 * dexp(1/5) + 0.3*dexp(1/10)
tiempo_espera
?dexp
plot(0:30, dexp(0:30, 1/5))
tiempo_espera(10)
# 0.7 vip y 0.3 estandar
# dexp(labmda) --> media = 1/labmda
tiempo_espera = function(x) 0.7 * dexp(x,1/5) + 0.3*dexp(x,1/10)
tiempo_espera(10)
plot(0:30, tiempo_espera(0:30))
#P(X>4) = 1 - P(X<4)
1 - (0.7*pexp(4, 1/5) + 0.3*pexp(4, 1/10))
'rexp'
?rexp
#En 7 días;
rexp(7, 1/5)
#En 7 días;
estandar =  rexp(7, 1/5) < 4
rexp(7, 1/5) < 4
#En 7 días;
estandar =  sum(rexp(7, 1/5) < 4)/7
sum(rexp(7, 1/5) < 4)/7
vip = sum(rexp(7,1/10)<4)/7
0.3*estandar + 0.7*vip
sum(rexp(7, 1/5) < 4)/7
rexp(7, 1/5) < 4)
rexp(7, 1/5) < 4
100
N=100
N=100
sims = replicate(N, {
estandar =  sum(rexp(7, 1/5) < 4)/7
vip = sum(rexp(7,1/10)<4)/7
0.3*estandar + 0.7*vip
})
mean(sims)
sims
mean(sims)
#En 7 días;
N=1000
sims = replicate(N, {
estandar =  sum(rexp(7, 1/5) < 4)/7
vip = sum(rexp(7,1/10)<4)/7
0.3*estandar + 0.7*vip
})
mean(sims)
source(utils.R)
?rep
#a) X>=3 en cada equipo
jugadores= c(rep(0,12), rep(1,8))
#X: num de jugadores buenos en cada equipo
#a) X>=3 en cada equipo
jugadores= c(rep(0,12), rep(1,8))
c(rep(0,12), rep(1,8))
sample(jugadores)
equipoA = jugadores[1:10]
jugadores[1:10]
jugadores[11:20]
#a) X>=3 en cada equipo
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
sum(equipoA)
#a) X>=3 en cada equipo
N=100
sims = replicate(N, {
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)>2
condB&condB
})
mean(sims)
sample(c(rep(0,12), rep(1,8)))
N=100
sims = replicate(N, {
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)>2
condB&condA
})
mean(sims)
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)=0
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)== 0
condB&condA
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)== 0
condB&condA
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)== 0
condB&condA
#A: num de jugadores buenos en el equipo A
#B: num de jugadires buenos en el equipo B
#a) P(X>=3, Y>=3) en cada equipo
N=100
sims = replicate(N, {
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)>2
condB&condA
})
mean(sims)
#b)P(B=0|A>2)
# = P(B=0, A>2) / P(A>2)
#1) P(B=0, A>2)
sims1 = replicate(N,{
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)== 0
condB&condA
})
p_b0a2 = mean(sims1)
p_b0a2
#A: num de jugadores buenos en el equipo A
#B: num de jugadires buenos en el equipo B
#a) P(X>=3, Y>=3) en cada equipo
N=100
sims = replicate(N, {
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)>2
condB&condA
})
mean(sims)
#b)P(B=0|A>2)
# = P(B=0, A>2) / P(A>2)
#1) P(B=0, A>2)
sims1 = replicate(N,{
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)== 0
condB&condA
})
p_b0a2 = sum(sims1)/N
p_b0a2
sample(c(rep(0,12), rep(1,8)))
sample(c(rep(0,12), rep(1,8)))
sample(c(rep(0,12), rep(1,8)))
sample(c(rep(0,12), rep(1,8)))
sample(c(rep(0,12), rep(1,8)))
sample(c(rep(0,12), rep(1,8)))
sum(equipoB)== 0
sum(equipoB)== 0
condB&condA
#1) P(B=0, A>2)
N1 = 5000
sims1 = replicate(N1,{
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
equipoB = jugadores[11:20]
condA = sum(equipoA)>2
condB = sum(equipoB)== 0
condB&condA
})
p_b0a2 = sum(sims1)/N
p_b0a2
#2) P(A<2)
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
condA = sum(equipoA)>2
replicate(N1, {
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
sum(equipoA)>2
})
p_a2 = mean(sims2)
#2) P(A<2)
sims2 = replicate(N1, {
jugadores= sample(c(rep(0,12), rep(1,8)))
equipoA = jugadores[1:10]
sum(equipoA)>2
})
p_a2 = mean(sims2)
p_a2
#3) P(B=0|A>2) = P(B=0, A>2) / P(A>2)
p_b0a2/p_a2
library(readr)
iris <- read_csv("iris.csv")
#View(iris)
#Sepal.Length ~Petal.Length + Species
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ geom_boxplot()
source("utils.R")
library(readr)
source("utils.R")
library(readr)
iris <- read_csv("iris.csv")
#View(iris)
#Sepal.Length ~Petal.Length + Species
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ geom_boxplot()
source("utils.R")
library(readr)
iris <- read_csv("iris.csv")
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ stat_summary() +
stat_summary(geom = 'line', aes(y=Petal.Length))
library("performance")
library(readr)
iris <- read_csv("iris.csv")
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ stat_summary() +
stat_summary(geom = 'line', aes(y=Petal.Length))
library("ggplot2")
library("ggplot2")
library(readr)
iris <- read_csv("iris.csv")
#Sepal.Length ~Petal.Length + Species
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ geom_boxplot()
library(readr)
iris <- read_csv("iris.csv")
#Sepal.Length ~Petal.Length + Species
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ geom_boxplot()
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length, col = Species))+ stat_summary() +
stat_summary(geom = 'line', aes(y=Petal.Length))
?power.t.test
#sabiendo cuanto vale la desv poblacional
power.t.test(delta = 30,  #diferencia de medias --> 30h
sd = 120,
sig.level = 0.01,
power = 0.9,
type = "one.sample",
alternative = "two.sided")
