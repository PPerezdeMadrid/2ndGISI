var_x = E_x2 - mu_x^2
desvX = sqrt(var_x)
p_y = colSums(probs)
mu_y = sum(y*p_y)
E_y2 = sum(y^2*p_y) #teorema estadsita inconsciente
var_y = E_y2 - mu_y^2
desvY = sqrt(var_y)
sigma_xy = E_xy - mu_x*mu_y
rho = sigma_xy/desvX*desvY
# queremos saber la CORRELACIÓN
#covarianza[x,y]/desvX * desvY
E_xy = costeEsperado
p_x = rowSums(probs)
mu_x = sum(x*p_x)
E_x2 = sum(x^2*p_x) #teorema estadsita inconsciente
var_x = E_x2 - mu_x^2
desvX = sqrt(var_x)
p_y = colSums(probs)
mu_y = sum(y*p_y)
E_y2 = sum(y^2*p_y) #teorema estadsita inconsciente
var_y = E_y2 - mu_y^2
desvY = sqrt(var_y)
sigma_xy = E_xy - mu_x*mu_y
rho = sigma_xy/desvX*desvY
rho
?integrate
integrate(f_tiempo, 0, Inf)
# Funcion de densidad
f_tiempo = function(t){
exp(-t/4.5)
}
integrate(f_tiempo, 0, Inf)
integrate(f_tiempo, 0, Inf)$value
f_tiempoC = function(t){
c * exp(-t/4.5)
}
plot(f_tiempoC())
plot(f_tiempoC(0:50))
curve(f_tiempoC)
# Funcion de densidad
f_tiempo = function(t){
exp(-t/4.5)
}
integral = integrate(f_tiempo, 0, Inf)$value
c = 1/integral
f_tiempoC = function(t){
c * exp(-t/4.5)
}
curve(f_tiempoC)
?curve
curve(f_tiempoC, from = 0, to = 50)
curve(f_tiempoC, from = 0, to = 5000)
curve(f_tiempoC, from = 0, to = 500)
curve(f_tiempoC, from = 0, to = 100)
#P(T>5)
integrate({
c * exp(-t/4.5)
}, 5, Inf)
#P(T>5)
curve(integrate(f_tiempoC, 5, Inf), from = 0, to = 50)
curve(f_tiempoC, from = 0, to = 50)
#P(T>5)
curve(f_tiempoC, from = 0, to = 50)
#P(T>5)
curve(f_tiempoC, from = 0, to = 20)
#P(T>5)
integrate(f_tiempoC, 5, Inf)$value
# ====> optional
# x <- seq(-3, 3, 0.2)
# y <- seq(-3, 3, 0.1)
# z <- outer(x, y, function(x, y) exp(-x^2) * exp(-2*y^2))
#
# lattice::levelplot(z, row.values = x, column.values = y, cuts = 50, colorkey=FALSE)
# lattice::contourplot(z, row.values = x, column.values = y, region = TRUE, colorkey=FALSE)
x <- seq(-3, 3, 0.2)
y <- seq(-3, 3, 0.1)
z <- outer(x, y, function(x, y) exp(-x^2) * exp(-2*y^2))
contour(z, x = x, y = y)
source("utils.R")
source("utils.R")
source("utils.R")
source("utils.R")
fsinC = function(x,y){
exp(-x^2)*exp(-2*y^2)
}
c = 1/integrate(fsinC, lower = -Inf, upper=Inf)
source("utils.R")
fsinC = function(x,y){
exp(-x^2)*exp(-2*y^2)
}
integral_c = integrate2_dydx(
fsinC,
from_x=-Inf, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) Inf
)
source("utils.R")
fsinC = function(x,y){
exp(-x^2)*exp(-2*y^2)
}
integral_c = integrate2_dydx(
fsinC,
from_x=-Inf, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) Inf
)
c = 1/integral_c$value
View(prob_de_xy)
c
integral_final = integrate2_dydx(
f,
from_x=1, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) 1
)
f = function(x,y){
c * exp(-x^2)*exp(-2*y^2)
}
integral_final = integrate2_dydx(
f,
from_x=1, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) 1
)
integral_final
source("utils.R")
fsinC = function(x,y){
exp(-x^2)*exp(-2*y^2)
}
integral_c = integrate2_dydx(
fsinC,
from_x=-Inf, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) Inf
)
c = 1/integral_c$value
f = function(x,y){
c * exp(-x^2)*exp(-2*y^2)
}
#Solución
integrate2_dydx(
f,
from_x=1, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) 1
)$calue
source("utils.R")
fsinC = function(x,y){
exp(-x^2)*exp(-2*y^2)
}
integral_c = integrate2_dydx(
fsinC,
from_x=-Inf, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) Inf
)
c = 1/integral_c$value
f = function(x,y){
c * exp(-x^2)*exp(-2*y^2)
}
#Solución
integrate2_dydx(
f,
from_x=1, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) 1
)$value
source("utils.R")
fsinC = function(x,y){
exp(-x^2)*exp(-2*y^2)
}
integral_c = integrate2_dydx(
fsinC,
from_x=-Inf, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) Inf
)
c = 1/integral_c$value
f = function(x,y){
c * exp(-x^2)*exp(-2*y^2)
}
#Solución a
integrate2_dydx(
f,
from_x=1, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) 1
)$value
#Solucion b
integrate2_dydx(
f,
from_x=1, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) Inf
)$value
source("utils.R")
fsinC = function(x,y){
exp(-x^2)*exp(-2*y^2)
}
integral_c = integrate2_dydx(
fsinC,
from_x=-Inf, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) Inf
)
c = 1/integral_c$value
f = function(x,y){
c * exp(-x^2)*exp(-2*y^2)
}
#Solución a
integrate2_dydx(
f,
from_x=1, to_x = Inf,
from_y = function(x) -Inf, to_y = function(x) 1
)$value
#Solucion b
integrate2_dydx(
f,
from_x=1, to_x = Inf,
from_y = function(x) x , to_y = function(x) Inf
)$value
?pbinom
prob = pbinom(110, 100, 0.88)
prob
prob = 1 - pbinom(110, 100, 0.88)
prob
prob = 1 - pbinom(100, 110, 0.88)
prob
function(n = 100:110){
1 - pbinom(n, 110, 0.88) <= 0.5
}
hello = function(n = 100:110){
1 - pbinom(n, 110, 0.88) <= 0.5
}
hello()
hello = function(n = 100:110){
1
1 - pbinom(100, n, 0.88) <= 0.5
}
hello()
hello = function(n = 100:110){
1 - pbinom(100, n, 0.88) <= 0.5
}
hello()
hello = function(n = 100:110){
1 - pbinom(100, n, 0.88) <= 0.05
}
hello()
hello = function(n = 100:110){
paste(1 - pbinom(100, n, 0.88) <= 0.05, n)
}
hello()
?dbinom
1-dbinom(0, 4, 0.5)
dbinom(2, 4, 0.5)
#Casos totales:
niños_total = rbinom(N, 2000, 0.5)
#Averiguar p_success:
N=100
n_girls = rbinom(N, 4, 0.5)
n_girls
n_girls==2
sum(n_girls==2)
sum(n_girls==2)/N
#Al menos un niño --> P(X>1)
#X: num de niños por familia
#tope, probabilidad --> binomial X~B
#P(X>1) = 1 - P(X<=0) = 1 -P(x=0) = 1 - dbinom(0, ...)
1-dbinom(0, 4, 0.5)
#-------------
#Exactamente dos niñas --> P(Y=2)
#Y: num niñas por familia Y~B(4,0.5)
dbinom(2, 4, 0.5)
#resolverlo por simulaciones:
#Casos totales:
#rbinom(N, 2000, P(X=2))
#Averiguar p_success:
N=100
n_girls = rbinom(N, 4, 0.5)
p_succes =sum(n_girls==2)/N
casos_totales = mean(
rbinom(N, 2000, p_success)
)
#Al menos un niño --> P(X>1)
#X: num de niños por familia
#tope, probabilidad --> binomial X~B
#P(X>1) = 1 - P(X<=0) = 1 -P(x=0) = 1 - dbinom(0, ...)
1-dbinom(0, 4, 0.5)
#-------------
#Exactamente dos niñas --> P(Y=2)
#Y: num niñas por familia Y~B(4,0.5)
dbinom(2, 4, 0.5)
#resolverlo por simulaciones:
#Casos totales:
#rbinom(N, 2000, P(X=2))
#Averiguar p_success:
N=100
n_girls = rbinom(N, 4, 0.5)
p_succes =sum(n_girls==2)/N
casos_totales = mean(
rbinom(N, 2000, p_succes)
)
#Al menos un niño --> P(X>1)
#X: num de niños por familia
#tope, probabilidad --> binomial X~B
#P(X>1) = 1 - P(X<=0) = 1 -P(x=0) = 1 - dbinom(0, ...)
1-dbinom(0, 4, 0.5)
#-------------
#Exactamente dos niñas --> P(Y=2)
#Y: num niñas por familia Y~B(4,0.5)
dbinom(2, 4, 0.5)
#resolverlo por simulaciones:
#Casos totales:
#rbinom(N, 2000, P(X=2))
#Averiguar p_success:
N=100
n_girls = rbinom(N, 4, 0.5)
p_succes =sum(n_girls==2)/N
mean(
rbinom(N, 2000, p_succes)
)
n_girls = rbinom(N, 4, 0.5)
#Averiguar p_success:
N=100
p_succes =sum(n_girls==2)/N
mean(
rbinom(N, 2000, p_succes)
)
function (x, ...)
mean(
rbinom(N, 2000, p_succes)
)
casos_totales = rbinom(N, 2000, p_succes)
mean(casos_totales)
rbinom(N, 2000, p_succes)
mean(casos_totales)
?dnbinom
#Binomial negativa (r=10, p=0.7)
#X: num de radiografías
#?P(X>15) = 1- P(X<=15)
1-pnbinom(15, 10, 0.7)
media = ((0*45)+(1*35)+(2*15)+(3*5))/100
?dpoiss
ppois()
?ppois()
#Lambda = 0.8
#X: num ataques por dia
#P(X>=1)??????????  = 1-P(X=0)
1-dpois(0,media)
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = dhyper(2, 3, 0.5) * dnbinom(3, 10, 0.5)
?dhyper
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = dhyper(2, 10, 3, 0.5) * dnbinom(3, 10, 0.5)
dhyper(y=2, 10, x=3, 5)
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = dhyper(x=2, m=10, n=3, 0.5) * dnbinom(3, 10, 0.5)
dhyper(x=2, m=10, n=3, 0.5)
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = phyper(x=2, m=10, n=3, 0.5) * dnbinom(3, 10, 0.5)
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = dhyper(x=2, 3, 10, 0.5) * dnbinom(3, 10, 0.5)
(3, 10, 5)
dnbinom(3, 10, 5)
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = dhyper(x=2, m=10, n=3, 5) * dnbinom(3, 10, 0.5)
p_xy = function(x,y){
dnbinom(y, 10, 0.5)*dhyper(x, 10, y, 5)
}
p_xy = function(x,y){
dnbinom(y, 10, 0.5)*dhyper(x, 10, y, 5)
}
xs: 0:100
xs= 0:100
ys= 0:5
tabla_sims = outer(xs,ys, p_xy)
tabla_sims
rowNames = paste("X=", x)
tabla_sims
#P(Y)
p_y = rowSums(pv)
rowSums(pv)
rowNames = paste("Y=", ys)
tabla_sims
#P(Y)
p_y = rowSums(pv)
#P(Y)
p_y = rowSums(tabla_sims)
rowSums(tabla_sims
)
tabla_sims
colSums(tabla_sims)
paste(p_y, "Y=", 0:5)
#P(Y)
p_y = colSums(tabla_sims)
paste(p_y, "Y=", 0:5)
pmax(p_y)
?max
tabla = paste(p_y, "Y=", 0:5)
max(tabla)
#se tira moneda hasta 10 caras ==> binomial Negativa r=10, p=0.5
# X: num de cruces hasta 10 caras ==> X~B(r=10, p=0.5)
# Y: num bolas blancas extraídas ==> Y~Hypergeom(10, n, 5)
#QUEREMOS P(Y)
# marginalizar --> P(Y|X) = P(x,y) / P(X)
#P(x,y --> ejemplp
x = 2 # dos bolas negras
y = 3 # tres bolas blancas
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = dhyper(x=2, m=10, n=3, 5) * dnbinom(3, 10, 0.5)
p_xy = function(x,y){
dnbinom(y, 10, 0.5)*dhyper(x, 10, y, 5)
}
xs= 0:100
ys= 0:5
tabla_sims = outer(xs,ys, p_xy)
tabla_sims
rowNames = paste("Y=", ys)
#P(Y)
p_y = colSums(tabla_sims)
tabla = paste(p_y, "Y=", 0:5)
max(tabla)
#se tira moneda hasta 10 caras ==> binomial Negativa r=10, p=0.5
# X: num de cruces hasta 10 caras ==> X~B(r=10, p=0.5)
# Y: num bolas blancas extraídas ==> Y~Hypergeom(10, n, 5)
#QUEREMOS P(Y)
# marginalizar --> P(Y|X) = P(x,y) / P(X)
#P(x,y --> ejemplp
x = 2 # dos bolas negras
y = 3 # tres bolas blancas
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = dhyper(x=2, m=10, n=3, 5) * dnbinom(3, 10, 0.5)
p_xy = function(x,y){
dnbinom(y, 10, 0.5)*dhyper(x, 10, y, 5)
}
xs= 0:100
ys= 0:5
tabla_sims = outer(xs,ys, p_xy)
tabla_sims
rowNames = paste("Y=", ys)
#P(Y)
p_y = colSums(tabla_sims)
tabla = paste(p_y, "Y=", 0:5)
max(tabla)
#se tira moneda hasta 10 caras ==> binomial Negativa r=10, p=0.5
# X: num de cruces hasta 10 caras ==> X~B(r=10, p=0.5)
# Y: num bolas blancas extraídas ==> Y~Hypergeom(10, n, 5)
#QUEREMOS P(Y)
# marginalizar --> P(Y|X) = P(x,y) / P(X)
#P(x,y --> ejemplp
x = 2 # dos bolas negras
y = 3 # tres bolas blancas
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = dhyper(x=2, m=10, n=3, 5) * dnbinom(3, 10, 0.5)
p_xy = function(x,y){
dnbinom(y, 10, 0.5)*dhyper(x, 10, y, 5)
}
xs= 0:100
ys= 0:5
tabla_sims = outer(xs,ys, p_xy)
tabla_sims
rowNames = paste("Y=", ys)
#P(Y)
p_y = colSums(tabla_sims)
tabla = paste(p_y, "Y=", 0:5)
max(tabla)
#se tira moneda hasta 10 caras ==> binomial Negativa r=10, p=0.5
# X: num de cruces hasta 10 caras ==> X~B(r=10, p=0.5)
# Y: num bolas blancas extraídas ==> Y~Hypergeom(10, n, 5)
#QUEREMOS P(Y)
# marginalizar --> P(Y|X) = P(x,y) / P(X)
#P(x,y --> ejemplp
x = 2 # dos bolas negras
y = 3 # tres bolas blancas
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = dhyper(x=2, m=10, n=3, 5) * dnbinom(3, 10, 0.5)
p_xy = function(x,y){
dnbinom(x, 10, 0.5)*dhyper(x, 10, y, 5)
}
xs= 0:100
ys= 0:5
tabla_sims = outer(xs,ys, p_xy)
tabla_sims
rowNames = paste("Y=", ys)
#P(Y)
p_y = colSums(tabla_sims)
tabla = paste(p_y, "Y=", 0:5)
max(tabla)
#se tira moneda hasta 10 caras ==> binomial Negativa r=10, p=0.5
# X: num de cruces hasta 10 caras ==> X~B(r=10, p=0.5)
# Y: num bolas blancas extraídas ==> Y~Hypergeom(10, n, 5)
#QUEREMOS P(Y)
# marginalizar --> P(Y|X) = P(x,y) / P(X)
#P(x,y --> ejemplp
x = 2 # dos bolas negras
y = 3 # tres bolas blancas
#P(y=3, x=2) = P(y=2| x=3) * P(x=3)
p_xy = dhyper(x=2, m=10, n=3, 5) * dnbinom(3, 10, 0.5)
p_xy = function(x,y){
dnbinom(x, 10, 0.5)*dhyper(y, 10, x, 5)
}
xs= 0:100
ys= 0:5
tabla_sims = outer(xs,ys, p_xy)
tabla_sims
rowNames = paste("Y=", ys)
#P(Y)
p_y = colSums(tabla_sims)
tabla = paste(p_y, "Y=", 0:5)
max(tabla)
#DISTRIBUCIÓN NORMAL
#X: cantidad comida por los hermanos N(mu= 1.5, var = 0.3)
# 3 hermanos --> 3 * 1.5 ---> N(mu=4.5, var = 0.3)
# P(X>5) = 1 - P(X<5) = 1 - pnorm
1 - p(5, 4.5, 0.3)
#DISTRIBUCIÓN NORMAL
#X: cantidad comida por los hermanos N(mu= 1.5, var = 0.3)
# 3 hermanos --> 3 * 1.5 ---> N(mu=4.5, var = 0.3)
# P(X>5) = 1 - P(X<5) = 1 - pnorm
1 - pnorm(5, 4.5, 0.3)
?Multinomial
knitr::opts_chunk$set(echo = TRUE)
prob_de_x(0:100, 100, 0.5)
plot(0:100, all_probs, type = "h")
