install.packages(
c("easystats", "GGally", "qqplotr")
)
library("tidyverse")
library("readr")
theme_set(theme_bw())  # cambia el tema de ggplot
library(readr)
hr <- read_table("data/hr.csv")
View(hr)
source("utils.R")
source("utils(3).R")
# 1) leer los datos
hr
# 2) Crear un modelo lineal
frog_model = lm(hr$heart_rate ~ hr$temperature)
function (formula, data, subset, weights, na.action, method = "qr",
model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE,
contrasts = NULL, offset, ...)
lm(hr$heart_rate ~ hr$temperature)
lm(hr$heart_rate ~ hr$temperature)
'lm'
?lm
# 2) Crear un modelo lineal
frog_model = lm(heart_rate ~ temperature, df = hr)
# 2) Crear un modelo lineal
frog_model = lm(heart_rate ~ temperature, df = hr)
#2º) Obtener estimaciones
summary(frog_model)
?preds
predict()
?predict()
#3º Obtener predicciones:
preds = predict(frog_model)
predict(frog_model)
#3º Obtener predicciones:
preds = predict(frog_model, interval = "confidence")
preds
#4º) Visualizar ajustes
ggplot(hr, aes(x = temperature, y = heart_rate))
#4º) Visualizar ajustes
ggplot(hr, aes(x = temperature) + geom_point(y = temperature)
#4º) Visualizar ajustes
ggplot(hr, aes(x = temperature) + geom_point(aes(y = temperature))
#4º) Visualizar ajustes
ggplot(hr, aes(x = temperature) + geom_point(aes(y = temperature))
#4º) Visualizar ajustes
ggplot(hr, aes(x = temperature) + geom_point(aes(y = temperature))
ggplot(hr, aes(x = temperature) + geom_point(aes(y = temperature))
#4º) Visualizar ajustes
ggplot(hr, aes(x = temperature)) + geom_point(aes(y = temperature))
ggplot(hr, aes(x = temperature)) + geom_point(aes(y = temperature))
#4º) Visualizar ajustes
ggplot(hr, aes(x = temperature)) + geom_point(aes(y = temperature)) +
geom_line(preds)
#1º) Crear modelo lineal
frog_model = lm(hr$heart_rate ~ hr$temperature)
#2º) Obtener estimaciones
summary(frog_model)
#4º) Visualizar ajustes
ggplot(hr, aes(x = temperature)) + geom_point(aes(y = heart_rate)) +
ggplot(hr, aes(x = temperature)) + geom_point(aes(y = heart_rate)) +
geom_line(aes(preds)
ggplot(hr, aes(x = temperature)) + geom_point(aes(y = heart_rate)) +
geom_line(aes(preds)
ggplot(hr, aes(x = temperature)) + geom_point(aes(y = heart_rate)) +
ggplot(hr, aes(x = temperature)) + geom_point(aes(y = heart_rate)) +
geom_line(aes(col = preds)
#4º) Visualizar ajustes
ggplot(hr, aes(x = temperature)) + geom_point(aes(y = heart_rate))
ggplot(hr, aes(x = temperature)) + geom_point(aes(y = heart_rate))
#4º) Visualizar ajustes
ggplot(hr, aes(x = temperature)) + geom_line(aes(y = heart_rate))
#2º) Obtener estimaciones
summary(frog_model)
ç
frog_model
#hr ~ temperatura
#Universo 1: la temperatura no influye en el HR (heart rate)
# HR= a´+ b * temperatura [b=0]
#Es b =0? o es b != 0 ?---> H0: b=0; Ha: b!=0
#Universo 2: la temperatura disminuye le ritmo cardiaco
# HR = a + b * temperatura [b<0]
#Universo 3: la temperatura aumenta el HR
# HR = a + b * temperatura [b>0]
# 1) leer los datos
library(readr)
hr <- read_table("data/data/hr.csv")
(hr$heart_rate ~ hr$temperature)
(hr$heart_rate ~ hr$temperature)
#1º) Crear modelo lineal
frog_model = lm(hr$heart_rate ~ hr$temperature)
frog_model
#2º) Obtener estimaciones INFERENCIA --> SI
summary(frog_model)
summary(frog_model)
confint(frog_model)
library(readr)
heights_earnings <- read_csv("data/heights_earnings.csv")
View(heights_earnings)
df_eh <- read_csv("data/heights_earnings.csv")
lm(df_eh$earn ~ df_eh$height)
#2º) obtener predicciones
summary(my_model)
#View(heights_earnings)
#1º) crear modelo linear
my_model = lm(df_eh$earn ~ df_eh$height)
#2º) obtener estimaciones
summary(my_model)
#3º) visualizar ajustes
ggplot(df_eh, aes(x=height)) + geom_line(aes(y=earn))
#3º) visualizar ajustes
ggplot(df_eh, aes(x=height)) + geom_point(aes(y=earn))
#3º) visualizar ajustes
ggplot(df_eh, aes(x=height)) + geom_point(aes(y=earn)) + geom_jitter(alpha = 0.6) + geom_smooth()
ggplot(df_eh, aes(x=height)) + geom_point(aes(y=earn)) + geom_jitter(alpha = 0.6) + geom_smooth()
#3º) visualizar ajustes
ggplot(df_eh, aes(x=height, y=earn)) + geom_point(aes(y=earn)) + geom_jitter(alpha = 0.6) + geom_smooth()
#3º) visualizar ajustes
ggplot(df_eh, aes(x=height, y=earn))  + geom_jitter(alpha = 0.6) + geom_smooth()
#--------ASUNCIONES-------------
is_norm = check_normality(my_model)
is_norm
plot(is_norm, type="qq")
library("GGally")
df = read.csv("data/heights_earnings.csv")
ggpairs(df[, c("earn", "height", "age")])
ha_model = lm(earn ~ height + age, df)
df$predictions = predict(ha_model)
summary(ha_model)
library("GGally")
df = read.csv("data/heights_earnings.csv")
ggpairs(df[, c("earn", "height", "age")])
ha_model = lm(earn ~ height + age, df)
df$predictions = predict(ha_model)
summary(ha_model)
summary(ha_model)
ggplot(df, aes(x=heights, y=earns, col = sex))
ggplot(df, aes(x=heights, col = sex)) + geom_line(aes(y=earn))
ggplot(df, aes(x=height, col = sex)) + geom_line(aes(y=earn))
ggplot(df, aes(x=height, col = sex)) + geom_point(aes(y=earn))
ggplot(df, aes(x=height, col = sex)) + geom_point(aes(y=earn)) + geom_jitter(alpha=0.6)
ggplot(df, aes(x=height, col = sex)) + geom_point(aes(y=earn))
ggplot(df, aes(x=height, col = sex)) + geom_point(aes(y=earn)) + geom_smooth()
ggplot(df, aes(x=height, col = sex)) + geom_point(aes(y=earn))
#------------ASUNCIONES-----------
is_norm = check_normality(my_model)
#------------ASUNCIONES-----------
is_norm = check_normality(ha_model)
is_norm
plot(is_norm, type="qq")
#-------TRANSFORMACIÓN LOGARÍTMICA ------------
log_earn = log(df$earn)
log_height = log(df$height)
log_model = lm(log_earn~log_height)
lm(log_earn~log_height)
log_model = lm(log_earn~log_height + sex)
log_model = lm(log_earn~log_height + sex)
lm(log_earn~log_height + sex)
log_model = lm(log_earn~log_height + df$sex)
log_model
summary(log_model)
is_normlog = check_normality(log_model)
is_normlog
plot(is_normlog, type="qq")
print("ES normal")
summary(ha_model)
summary(log_model)
log_model
antrop = read.csv("data/antrop.csv")
View(antrop)
antrop$male = as.factor(antrop$male)
antrop_model = lm(weight ~ height + male, data = antrop)
antrop_model
antrop = read.csv("data/antrop.csv")
antrop$male = as.factor(antrop$male)
antrop_model = lm(weight ~ height + male, data = antrop)
antrop_model
antrop_preds = bind_cols(antrop, fit = predict(antrop_model))
ggplot(antrop_preds, aes(x = height, col=male)) +
geom_point(aes(y = weight)) +
geom_line(aes(y = fit), lwd = 3)
# summary(antrop_model)
antrop = read.csv("data/antrop.csv")
antrop$male = as.factor(antrop$male)
antrop_model = lm(weight ~ height + male, data = antrop)
antrop_model
antrop_preds = bind_cols(antrop, fit = predict(antrop_model))
ggplot(antrop_preds, aes(x = height, col=male)) +
geom_point(aes(y = weight)) +
geom_line(aes(y = fit), lwd = 2)
# summary(antrop_model)
summary(antrop_model)
Confint(antrop_model)
library(readr)
howell1 <- read_delim("data/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(howell1)
library(readr)
howell1 <- read_delim("data/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(howell1)
kung_model = lm(weight~height + sex, data = howell1)
kung_model
kung_model = lm(weight~height + sex, data = howell1)
kung_model
#View(howell1)
howell1$male = as.factor(howell1$male)
kung_model = lm(weight~height + male, data = howell1)
kung_model
summary(kung_model)
confint(kung_model)
data(iris)
iris_model = lm(Sepal.Length ~ Species, iris)
print(summary(iris_model))
iris_preds = bind_cols(iris, fit = predict(iris_model))
source(("utils(3).R"))
data(iris)
iris_model = lm(Sepal.Length ~ Species, iris)
print(summary(iris_model))
iris_preds = bind_cols(iris, fit = predict(iris_model))
ggplot(iris_preds, aes(x=Species, fill = Species)) +
geom_boxplot(aes(y=Sepal.Length)) +
geom_point(aes(y = fit), shape=4, size=3)
iris
irisdata = data(iris)
iris_model = lm(Sepal.length~Species)
iris_model = lm(Sepal.length~Species, iris)
iris_model = lm(Sepal.Length~Species, iris)
lm(Sepal.Length~Species, iris)
#datos categóricos --> boxplot
ggplot(iris, aes(x=species)) + geom_boxplot(aes(y=Sepal.Length))
#datos categóricos --> boxplot
ggplot(iris, aes(x=Species)) + geom_boxplot(aes(y=Sepal.Length))
#datos categóricos --> boxplot
ggplot(iris, aes(x=Species, fill=Species)) + geom_boxplot(aes(y=Sepal.Length))
data(iris)
iris_model = lm(Sepal.Length ~ Species, iris)
print(summary(iris_model))
iris_preds = bind_cols(iris, fit = predict(iris_model))
ggplot(iris_preds, aes(x=Species, fill = Species)) +
geom_boxplot(aes(y=Sepal.Length)) +
geom_point(aes(y = fit), shape=4, size=3)
irisdata = data(iris)
iris_model = lm(Sepal.Length~Species, iris)
#datos categóricos --> boxplot
ggplot(iris, aes(x=Species, fill=Species)) + geom_boxplot(aes(y=Sepal.Length))
contrasts(iris$Species)
iris_model
#reescribir contrastes --> relevel!!!!
iris$Species = relevel(iris$Species, "versicolor")
contras(iris_model)
contrast(iris_model)
contrast(iris$Species)
contrast(iris$Species)
iris_model_2 = lm(Sepal.Length ~ Species, iris)
summary(iris_model_2)
source("utils.R")   # cargamos get_contrasts_coding
# Cambiamos otra vez la especie referencia (no es necesario, pero para tener
# a las vs juntas)
iris$Species = relevel(iris$Species, "setosa")
levels(iris$Species)
contrasts(iris$Species)
matriz_contrastes = rbind(
"setosa vs v" =  c(1, -0.5, -0.5),
"VI vs vII" = c( 0, 1, -1 )
)
my_coding = get_contrasts_coding(matriz_contrastes)
contrast(iris$Species) = my_coding
contrast(iris$Species)
my_coding = get_contrasts_coding(matriz_contrastes)
contrast(iris$Species) = my_coding
contrast(iris$Species)
contrasts(iris$Species) = my_coding
contrasts(iris$Species)
v_model = lm(Sepal.Length ~ Species, iris)
summary(v_model)
contrasts(iris$Species)
library(readr)
heights_earnings <- read_csv("data/heights_earnings.csv")
View(heights_earnings)
#1º) Visualizar
ggplot(df, aes(x=earnings))
#1º) Visualizar
ggplot(df, aes(x=earn)) + geom_line(aes(y=height))
#1º) Visualizar
ggplot(df, aes(x=earn)) + geom_point(aes(y=height))
#1º) Visualizar
ggplot(df, aes(x=height)) + geom_point(aes(y=earn))
#1º) Visualizar
ggplot(df, aes(x=height), col=sex) + geom_point(aes(y=earn))
, col=sex
#1º) Visualizar
ggplot(df, aes(x=height, col=sex)) + geom_point(aes(y=earn))
#1º) Visualizar
ggplot(df, aes(x=height, col=sex)) + geom_point(aes(y=earn)) + geom_smooth()
#1º) Visualizar
ggplot(df, aes(x=height, col=sex)) + geom_point(aes(y=earn))
#2º) Modelo Lineat
my_model = lm(earn~height + sex + age, df)
my_model
#1º) Visualizar
ggplot(df, aes(x=height, col=sex)) + geom_point(aes(y=earn)) + geom_line(aes(y=ed))
#1º) Visualizar
ggplot(df, aes(x=height, col=sex)) + geom_point(aes(y=earn)) + geom_pint(aes(y=ed))
#1º) Visualizar
ggplot(df, aes(x=height, col=sex)) + geom_point(aes(y=earn)) + geom_point(aes(y=ed))
#1º) Visualizar
ggplot(df, aes(x=height, col=ed)) + geom_point(aes(y=earn))
#1º) Visualizar
ggplot(df, aes(x=height, col=ed)) + geom_point(aes(y=earn)) + geom_line(aes(y=sex))
#1º) Visualizar
ggplot(df, aes(x=height, col=ed)) + geom_point(aes(y=earn, col = sex))
#1º) Visualizar
ggplot(df, aes(x=height, col=ed)) + geom_point(aes(y=earn))
#2º) Modelo Lineat
my_model = lm(earn~height + sex + ed, df)
my_model
is_norm = check_normality(my_model)
is_norm
plot(is_norm, type="qq")
log_earn = log(df$earn)
log_height = log(df$height)
log_height = log(df$ed)
my_log_model = lm(log_earn ~log_height + sex + ed, df)
df$log_earn = log(df$earn)
df$log_height = log(df$height)
library(readr)
df <- read_csv("data/heights_earnings.csv")
#View(heights_earnings)
#1º) Visualizar
ggplot(df, aes(x=height, col=ed)) + geom_point(aes(y=earn))
#2º) Modelo Lineat
my_model = lm(earn~height + sex + ed, df)
my_model
#3º) asunciones
is_norm = check_normality(my_model)
is_norm
plot(is_norm, type="qq")
df$log_earn = log(df$earn)
df$log_height = log(df$height)
df
my_log_model = lm(log_earn ~log_height + sex + ed, df)
summary(my_log_model)
summary(my_model)
my_log_model = lm(log_earn ~log_height + sex, df)
summary(my_model2)
my_model2 = lm(earn~height + sex, df)
summary(my_model2)
# install.packages(
#  c("afex", "emmeans")
# )
install.packages(
c("afex", "emmeans")
)
library("tidyverse")
library("easystats") # carga performance y effectsize
theme_set(theme_bw())  # cambia el tema de ggplot
library("car")  # Anova
options(contrasts = c("contr.sum", "contr.poly"))   # ver utils.R
data("iris")
# 1) Visualizar
head(iris)
ggplot(iris, aes(x=Species, y = Sepal.Length, fill=Species)) + geom_boxplot() +
coord_flip()
# 2) Especificar contrastes si tenemos alguna hipótesis específica
source("utils.R")
ggplot(iris, aes(x=Sepal.Length, y =Species , fill=Species)) + geom_boxplot() +
coord_flip()
# 2) Especificar contrastes si tenemos alguna hipótesis específica
source("utils(3).R")
my_contrasts = rbind(
"V - setosa" = c(-1, 0.5, 0.5),
"I - II" = c(0, 1, -1)
)
my_coding = get_contrasts_coding(my_contrasts)
contrasts(iris$Species) = my_coding
contrasts(iris$Species)
v_model = lm(Sepal.Length ~ Species, iris)
# 3) Correr ANOVA: test omnibus
v_model_aov = Anova(v_model, type = 3)
v_model_aov
# 4.a)
summary(v_model)
confint(v_model)
?pairwise.t.test
View(iris)
?pairwise.t.test
pairwise.t.test(iris$Species, iris$Sepal.Length, p.adjust.method = "bonferroni"  )
pairwise.t.test(iris$Species, iris$Sepal.Length, p.adjust.method = "bonferroni"  )
# Bonferroni es bastante conservador, pero es un ajuste muy conocido
pairwise.t.test(iris$Sepal.Length, iris$Species, p.adjust.method = "bonferroni")
# Los métodos fdr son "BH" (aka "fdr") and "BY".
pairwise.t.test(iris$Sepal.Length, iris$Species, p.adjust.method = "fdr")
pairwise.t.test(iris$Sepal.Length,iris$Species,p.adjust.method = "bonferroni"  )
pairwise.t.test(iris$Sepal.Length,iris$Species,p.adjust.method = "fdr")
library(readr)
anxiety <- read_csv("data/anxiety.csv")
View(anxiety)
# 1) Visualizar
library(readr)
anxiety <- read_csv("data/anxiety.csv")
View(anxiety)
# 2) Contrates
# No tenemos hipótesis :(
# 3) Anova + asunciones
# anxiety_lm = ...
# 4) Posthoc tests!
# ...
gggplot(anxiety, aes(x=group))+ geom_line(aes(y=pretest), col = 2) + geom_line(aes(y=posttest), col = 3) + geom_boxplot()
# 1) Visualizar
source("utils(3).R")
library(readr)
anxiety <- read_csv("data/anxiety.csv")
gggplot(anxiety, aes(x=group))+ geom_line(aes(y=pretest), col = 2) + geom_line(aes(y=posttest), col = 3) + geom_boxplot()
ggplot(anxiety, aes(x=group))+ geom_line(aes(y=pretest), col = 2) + geom_line(aes(y=posttest), col = 3) + geom_boxplot()
ggplot(anxiety, aes(x=group))+ geom_line(aes(y=pretest), col = 2) + geom_line(aes(y=posttest), col = 3)
ggplot(anxiety, aes(x=group))+ geom_line(aes(y=pretest), col = 2) + geom_line(aes(y=posttest), col = 4)
ggplot(anxiety, aes(x=group, y = posttest - pretest)) + geom_boxplot()
ggplot(anxiety, aes(x=group, y = posttest - pretest, fill = group)) + geom_boxplot()
# 1) Visualizar
source("utils(3).R")
library(readr)
anxiety <- read_csv("data/anxiety.csv")
#View(anxiety)
ggplot(anxiety, aes(x=group, y = posttest - pretest, fill = group)) + geom_boxplot()
# 2) Contrates
# No tenemos hipótesis :(
# 3) Anova + asunciones
# anxiety_lm = ...
# 4) Posthoc tests!
# ...
# 3) Anova + asunciones
anxiety_lm = lm(posttest - pretest,anxiety)
# 3) Anova + asunciones
#depende el posttest de pretest Y group
anxiety_lm = lm(posttest~pretest+group,anxiety)
lm(posttest~pretest+group,anxiety)
anxiety_aov = Anova(anxiety_lm)
anxiety_aov
summary(anxiety_aov)
summary(anxiety_lm)
anxiety_aov = Anova(anxiety_lm, type=3)
anxiety_aov
# 4) Posthoc tests!
pairwise.t.test(anxiety$posttest, anxiety$pretest, p.adjust.method = "fwd")
# 4) Posthoc tests!
pairwise.t.test(anxiety$posttest, anxiety$pretest, p.adjust.method = "fdr")
# 4) Posthoc tests!
pairwise.t.test(anxiety$posttest, anxiety$pretest, p.adjust.method = "bonferroni")
# 4) Posthoc tests!
#comparar los niveles de POSTTEST con los GRUPOS
pairwise.t.test(anxiety$posttest, anxiety$group, p.adjust.method = "bonferroni")
# 4) Posthoc tests!
#comparar los niveles de POSTTEST con los GRUPOS
pairwise.t.test(anxiety$posttest - anxiety$pretest, anxiety$group, p.adjust.method = "bonferroni")
library(emmeans)
emmeans(anxiety$group)
?emmeans
emmeans_grupos = emmeans(anxiety_lm, "group")
emmeans(anxiety_lm, "group")
pairs(emmeans_grupos, type="tukey")
drugs_df_1 = read.csv("data/drugs_1.csv")
drugs_df_1$drug = factor(drugs_df_1$drug)
drugs_df_1$sex = factor(drugs_df_1$sex)
ggplot(drugs_df_1, aes(x=sex, y=response_time, col=drug)) +
stat_summary() +
stat_summary(geom='line', aes(group=drug))
ggplot(drugs_df_1, aes(x=drug, y=response_time, col=sex)) +
stat_summary() +
stat_summary(geom='line', aes(group=drug))
sex
sex
drugs_df_1 = read.csv("data/drugs_1.csv")
drugs_df_1$drug = factor(drugs_df_1$drug)
drugs_df_1$sex = factor(drugs_df_1$sex)
ggplot(drugs_df_1, aes(x=sex, y=response_time, col=drug)) +
stat_summary() +
stat_summary(geom='line', aes(group=drug))
drugs_model_1 = lm(response_time ~ sex + drug, data = drugs_df_1)
drugs_df_1$predictions = predict(drugs_model_1)
ggplot(drugs_df_1, aes(x=sex, y=predictions, col=drug)) +
stat_summary() +
stat_summary(geom='line', aes(group=drug))
drugs_df_2 = read.csv("data/drugs_2.csv")
drugs_df_2 = mutate(drugs_df_2, drug = factor(drug), sex = factor(sex))
# interaction.plot(drugs_df$sex, drugs_df$drug, response = drugs_df$response_time)
ggplot(drugs_df_2, aes(x=sex, y=response_time, col=drug)) +
stat_summary() +
stat_summary(geom='line', aes(group=drug))
