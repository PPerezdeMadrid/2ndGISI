sims1 = rnorm(45, sd=7)
sims2 = rnorm(60, sd = 12)
c(sims1, sims2)
?var.test
var.test(sims_x, sims_y, conf.level = 0.99)
sims_x = rnorm(45, sd=7)
sims_y = rnorm(60, sd = 12)
var.test(sims_x, sims_y, conf.level = 0.99)
mean(sims_x)
mean(sims_y)
rnorm(45, mu = -0.53, sd=7)
sims_x = rnorm(45, sd=7)
mu_ x=mean(sims_x)
mu_x=mean(sims_x)
mean(sims_x)
mean(sims_x)
power.t.test( #delta = 0.5, #CAMBIAR!!!
#sd = 1,      #CAMBIAR !!!
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
var.test(sims_x, sims_y, conf.level = 0.99)
power.t.test( delta = 0.39, #CAMBIAR!!!
#sd = 1,      #CAMBIAR !!!
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
power.t.test( #delta = 0.39, #CAMBIAR
n = 45,
sd = 7,      #CAMBIAR !!!
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
power.t.test( #delta = 0.39, #CAMBIAR
n = 60,
sd = 12,      #CAMBIAR !!!
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
power.t.test ( delta= 3.17 - 2.5,
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
ggplot(colds, aes(x=`"cold_during_study"`))+ geom_histogram()
library(readr)
colds <- read_table("colds.csv")
View(colds)
#2)Buscar estadístico: media muestral con var desconocida = T de Student
#histograma
num_bin = nclass.FD(colds$weeks)
#2)Buscar estadístico: media muestral con var desconocida = T de Student
#histograma
num_bin = nclass.FD(colds$weeks)
colds$weeks
#2)Buscar estadístico: media muestral con var desconocida = T de Student
#histograma
num_bin = nclass.FD(colds$`"cold_during_study"`)
ggplot(colds, aes(x=`"cold_during_study"`)) + geom_histogram(bins = num_bin)
ggplot(colds, aes(x=v)) + geom_histogram(bins = num_bin)
?t.tes
?t.test
var.test(sims_x, sims_y, conf.level = 0.99)
power.t.test ( delta= 3.17 - 2.5, #diferencia de la delta
n = 100
sig.level = 0.09,
power.t.test ( delta= 3.17 - 2.5, #diferencia de la delta
n = 100,
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
power.t.test ( n =100, delta= 3.17 - 2.5, #diferencia de la delta
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
power.t.test (delta= 3.17 - 2.5, #diferencia de la delta
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
power.t.test(n=100,
delta = 0.67,
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
power.t.test(n=100,
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
power.t.test( #delta = 0.39, #CAMBIAR
n = 45,
sd = 7,      #CAMBIAR !!!
sig.level = 0.09,
power = 0.85,
type = "one.sample",
alternative = "one.sided"
)
var.test(sims_x, sims_y, conf.level = 0.99)
# Método A: media=100, desv = 3
# Método B: media = 99.8 desv = 1.2cm  20 piezas
# Suponer que tienen una distribución normal
# COMPARACIÓN DE VARIANZAS --> F de Snedecor
#Asunciones
#Estandarización simulaciones:
simsA = rnorm(20, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsA_z, simsB_z, conf.level = 0.99)
codls
source("utils.R")
library(readr)
colds <- read_table("colds.csv")
as.factor(colds$`"sex"`)
#1) Formular hipótesis
#h0: mu_mujeres > mu_hombres (media de falses)
#Ha: mu_mujeres <= mu_hombres = mu_mujeres - mu_hombres < 0
#X: media mujeres true --> B~(n_mujeres, p_true)
#Y: media hombre true --> B~(n_hombres, p_true)
n_mujeres = colds$`"sex"` == 	"female"
n_mujeres = colds$`"sex"` == `"female"`
count(colds, `"sex"`)
library(plyr)
count(colds, `"sex"`)
library(plyr)
count(colds, `"sex"`)
source("utils.R")
library(readr)
colds <- read_table("colds.csv")
#1) Formular hipótesis
#h0: mu_mujeres > mu_hombres (media de falses)
#Ha: mu_mujeres <= mu_hombres = mu_mujeres - mu_hombres < 0
#X: media mujeres true --> B~(n_mujeres, p_true)
#Y: media hombre true --> B~(n_hombres, p_true)
mujeres = colds$`"sex"`==`"female"`
mujeres = sum(colds$`"sex"`==`"female"`)
colds
mujeres = sum(colds$`"sex"`== "\"female\"")
n_hombres = sum(colds$`"sex"`==  "\"male\"" )
mujeres = colds$`"sex"`== "\"female\""
View(mujeres)
colds$mujeres = colds$`"sex"`== "\"female\""
View(colds)
sum(colds$mujeres)
n_resfriadas = (colds$mujeres==TRUE) & (colds$`"cold_during_study"`==TRUE)
n_resfriadas = sum((colds$mujeres==TRUE) & (colds$`"cold_during_study"`==TRUE))
p_a = n_resfriadas/n_mujeres
p_o = n_resfriados/n_hombres
source("utils.R")
library(readr)
colds <- read_table("colds.csv")
View(colds)
#1) Formular hipótesis
#h0: mu_mujeres > mu_hombres (media de falses)
#Ha: mu_mujeres <= mu_hombres = mu_mujeres - mu_hombres < 0
#X: media mujeres true --> B~(n_mujeres, p_true)
#Y: media hombre true --> B~(n_hombres, p_true)
n_mujeres = sum(colds$`"sex"`== "\"female\"")
n_hombres = sum(colds$`"sex"`==  "\"male\"" )
colds$mujeres = colds$`"sex"`== "\"female\""
n_resfriadas = sum((colds$mujeres==TRUE) & (colds$`"cold_during_study"`==TRUE))
n_resfriados = sum((colds$mujeres==FALSE) & (colds$`"cold_during_study"`==TRUE))
p_a = n_resfriadas/n_mujeres
p_o = n_resfriados/n_hombres
p_a
p_o
table(colds)
colds <- read_table("colds.csv")
tabla_resfriados = table(colds)
tabla_resfriados
?rowsum
?prop.test
prop.test(vector_exitos, (n_mujeres+n_hombres), alternative = "greater")
vector_exitos = c(n_resfriadas, n_resfriados)
prop.test(vector_exitos, (n_mujeres+n_hombres), alternative = "greater")
prop.test(n_resfriadas, n_mujeres)
vector_exitos = c(n_resfriadas, n_resfriados, p = p_a)
vector_exitos = c(n_resfriadas, n_resfriados)
prop.test(n_resfriadas, n_mujeres, p = p_a)
tabla_resfriados = table(colds)
tabla_resfriados
vec_x = c(exito_women, exito_men)
exito_women = tabla_resfriados[1,2]
exito_men = tabla_resfriados[2,2]
vec_x = c(exito_women, exito_men)
prop.test(vec_x, rowSums(tabla_resfriados), alternative = "greater")
#DATOS APAREADOS
source("utils.R")
library(readr)
course <- read_csv("course.csv")
#1) Formular hipótesis
#H0: mu_notaDespues <= mu_notaAntes
#Ha: mu_notaDespues > mu_notaAntes = mu_notaDespues - mu_notaAntes > 0
#2) Discutir asunciones:
#Independencia muestras (población infinita)
#Normalidad poblaciones:
diff_notas = course$after_training - course$before_training
hist(diff_notas)
#3)Estadístico (T de Student)
#Ha: mu_notaDespues - mu_notaAntes > 0
my_test = t.test(diff_notas, alternative = "greater", mu = 0)
my_test
#4) Tamaño del efecto
library("effectsize")
effectsize(my_test)
print("EL tamaño del efecto es pequeño, se recomienda realizar más pruebas")
var.test(sims_x, sims_y)$p.value < 0.01
sims = function(nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85){
replicate(n,{
sims_x = rnorm(nx, sd=sdx)
sims_y = rnorm(ny, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
}
sims
mean(sims)
sims = function(n=10000, nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85){
replicate(n,{
sims_x = rnorm(nx, sd=sdx)
sims_y = rnorm(ny, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
}
## Pregunta 5 (hecho)
El fichero births.csv contiene datos sobre nacimientos de bebés, incluido el número de semanas de embarazo (“weeks”). ¿Cuál es el intervalo de confianza al 98% para el número de semanas de gestación?
37.00230, 39.73901
```{r}
sims = function(n=10000, nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85){
replicate(n,{
sims_x = rnorm(nx, sd=sdx)
sims_y = rnorm(ny, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
}
sims
sims = function(n=10000, nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85){
sim = replicate(n,{
sims_x = rnorm(nx, sd=sdx)
sims_y = rnorm(ny, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
}
mean(sim)
#Ha:varX != varY
sims_x = rnorm(45, sd=7)
mu_x =mean(sims_x)
sims_y = rnorm(60, sd = 12)
mu_y=mean(sims_y)
var.test(sims_x, sims_y, conf.level = 0.99)
sims = function(n=10000, nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85){
sim = replicate(n,{
sims_x = rnorm(nx, sd=sdx)
sims_y = rnorm(ny, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
}
mean(sim)
mean(sim)
sims = function(n=10000, nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85, N=100){
sim = replicate(n,{
sims_x = rnorm(N, sd=sdx)
sims_y = rnorm(N, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
}
sims = Vectorize(sims)
mean(sim)
var.test(sims_x, sims_y, conf.level = 0.99)$
sims = function(n=10000, nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85, N=100){
sim = replicate(n,{
sims_x = rnorm(N, sd=sdx)
sims_y = rnorm(N, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
}
var.test(sims_x, sims_y, conf.level = 0.99)
var.test(sims_x, sims_y, conf.level = 0.99)$p.value
#Ha:varX != varY
sims_x = rnorm(45, sd=7)
mu_x =mean(sims_x)
sims_y = rnorm(60, sd = 12)
mu_y=mean(sims_y)
var.test(sims_x, sims_y, conf.level = 0.99)
sims = function(n=10000, nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85, N=100){
sim = replicate(n,{
sims_x = rnorm(N, sd=sdx)
sims_y = rnorm(N, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
}
sims = Vectorize(sims)
mean(sim)
mean(sims)
sims = Vectorize(sims)
sims = function(n=10000, nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85, N=100){
sim = replicate(n,{
sims_x = rnorm(N, sd=sdx)
sims_y = rnorm(N, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
mean(sim)
}
sims = Vectorize(sims)
sims()
replicate(n,{
sims_x = rnorm(N, sd=sdx)
sims_y = rnorm(N, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
)
sim = replicate(n,{
sims_x = rnorm(N, sd=sdx)
sims_y = rnorm(N, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
n=10000, nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85, N=100
sim = replicate(n,{
sims_x = rnorm(N, sd=sdx)
sims_y = rnorm(N, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
n=10000, nx=45, ny=60, sdx=7, sdy=12, alpha = 0.01, potencia = 0.85, N=100
n=10000
nx=45
ny=60
sdx=7
sdy=12
alpha = 0.01
potencia = 0.85
N=100
sim = replicate(n,{
sims_x = rnorm(N, sd=sdx)
sims_y = rnorm(N, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
sim
mean(sim)
sims = function(N){
sim = replicate(n,{
sims_x = rnorm(N, sd=sdx)
sims_y = rnorm(N, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
mean(sim)
}
sims = Vectorize(sims)
sims(N = 91:212)
# Método A: media=100, desv = 3
# Método B: media = 99.8 desv = 1.2cm  20 piezas
# Suponer que tienen una distribución normal
# COMPARACIÓN DE VARIANZAS --> F de Snedecor
#Asunciones
#Estandarización simulaciones:
simsA = rnorm(20, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsA_z, simsB_z)
simsA2 = rnorm(100, mean=100, sd=3)
simsB2= rnorm(100, mean=99.8, sd=1.2)
simsA_z2 = (simsA2 - mean(simsA2)/sd(simsA2) * 3)
simsB_z2 = (simsB2 - mean(simsB2)/sd(simsB2)* 1.2)
var.test(simsA_z2, simsB_z2)
# Método A: media=100, desv = 3
# Método B: media = 99.8 desv = 1.2cm  20 piezas
# Suponer que tienen una distribución normal
# COMPARACIÓN DE VARIANZAS --> F de Snedecor
#Asunciones
#Estandarización simulaciones:
simsA = rnorm(20, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsA_z, simsB_z)
# Método A: media=100, desv = 3
# Método B: media = 99.8 desv = 1.2cm  20 piezas
# Suponer que tienen una distribución normal
# COMPARACIÓN DE VARIANZAS --> F de Snedecor
#Asunciones
#Estandarización simulaciones:
simsA = rnorm(20, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsA_z, simsB_z)
# Método A: media=100, desv = 3
# Método B: media = 99.8 desv = 1.2cm  20 piezas
# Suponer que tienen una distribución normal
# COMPARACIÓN DE VARIANZAS --> F de Snedecor
#Asunciones
#Estandarización simulaciones:
simsA = rnorm(20, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsA_z, simsB_z)
# Método A: media=100, desv = 3
# Método B: media = 99.8 desv = 1.2cm  20 piezas
# Suponer que tienen una distribución normal
# COMPARACIÓN DE VARIANZAS --> F de Snedecor
#Asunciones
#Estandarización simulaciones:
simsA = rnorm(20, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsA_z, simsB_z)
# Método A: media=100, desv = 3
# Método B: media = 99.8 desv = 1.2cm  20 piezas
# Suponer que tienen una distribución normal
# COMPARACIÓN DE VARIANZAS --> F de Snedecor
#Asunciones
#Estandarización simulaciones:
simsA = rnorm(20, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsA_z, simsB_z)
sims = replicate ( 1000, {
simsA = rnorm(20, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsA_z, simsB_z)$p.value
})
sims
mean(sims)
sims = replicate ( 1000, {
simsA = rnorm(100, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsA_z, simsB_z)$p.value
})
mean(sims)
sims = replicate ( 1000, {
simsA = rnorm(100, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsA_z, simsB_z)$p.value
})
mean(sims)
prop.test( delta = 3-1.2,
sd = 1.2,
power = 0.9,
type="one.sample")
simsB= rnorm(20, mean=99.8, sd=1.2)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsB_z)
var.test(simsB_z, simsA_z)
var.test(simsB_z, simsA_z)$p.value
sims = replicate ( 1000, {
simsA = rnorm(100, mean=100, sd=3)
simsB= rnorm(20, mean=99.8, sd=1.2)
simsA_z = (simsA - mean(simsA)/sd(simsA) * 3)
simsB_z = (simsB - mean(simsB)/sd(simsB)* 1.2)
var.test(simsB_z, simsA_z)$p.value
})
mean(sims)
#H0: varx = vary
#Ha:varX != varY ==> varx - vary != 0 ==> varx/vary != 1
sims_x = rnorm(45, sd=7)
mu_x =mean(sims_x)
sims_y = rnorm(60, sd = 12)
mu_y=mean(sims_y)
var.test(sims_x, sims_y, conf.level = 0.99)
n=10000
nx=45
ny=60
sdx=7
sdy=12
alpha = 0.01
potencia = 0.85
N=100
sims = function(N){
sim = replicate(n,{
sims_x = rnorm(N, sd=sdx)
sims_y = rnorm(N, sd = sdy)
var.test(sims_x, sims_y)$p.value < 0.01
})
mean(sim)
}
sims = Vectorize(sims)
sim()
sims()
list()
knitr::opts_chunk$set(echo = TRUE)
View(colds)
# 1º) ASUNCIONES
# n estudiada <<< Poblacion dirigida
hist(births$weeks) #distrib normal
ggplot(births, aes(x = weeks)) + geom_histogram()
# 2º) Ttest:
t.test(births$weeks, conf.level=0.98)
