knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# install.packages(
#  c("afex", "emmeans")
# )
# Chunk 3
library("tidyverse")
library("easystats") # carga performance y effectsize
theme_set(theme_bw())  # cambia el tema de ggplot
# Chunk 4
library("ggplot2")
library("car")  # Anova
options(contrasts = c("contr.sum", "contr.poly"))   # ver utils.R
#no hace falta memorizar están en utils.R
data("iris")
# 1) Visualizar
head(iris)
ggplot(iris, aes(x=Species, y = Sepal.Length, fill=Species)) + geom_boxplot()  +
coord_flip()
# 2) Especificar contrastes si tenemos alguna hipótesis específica
source("utils.R")
my_contrasts = rbind(
"V - setosa" = c(-1, 0.5, 0.5),
"I - II" = c(0, 1, -1)
)
my_coding = get_contrasts_coding(my_contrasts)
contrasts(iris$Species) = my_coding
contrasts(iris$Species)
v_model = lm(Sepal.Length ~ Species, iris)
# 3) Correr ANOVA: test omnibus
v_model_aov = Anova(v_model, type = 3)
# Chunk 5
eta_squared(v_model_aov)  # o effectsize(v_model_aov)
omega_squared(v_model_aov) # omega-squared se supone que está menos sesgado que eta_squared
# Chunk 6
# 4.a)
summary(v_model)
confint(v_model)
# Chunk 7
# Bonferroni es bastante conservador, pero es un ajuste muy conocido
pairwise.t.test(iris$Sepal.Length, iris$Species, p.adjust.method = "bonferroni")
#compraa virginica con versiocolor: 8.3e-09 pvalor
#Usa ttest para comparar versicolor y setosa, otro para virginica y setosa y
#otro parea versicolor y virginica
#Quiero un n ivel del significacion del 95%: fallar el 5% de las veces
#Estamos haciendo aqui muchas comparaciones --> el error comparado es 5%
# Chunk 8
# Los métodos fdr son "BH" (aka "fdr") and "BY".
pairwise.t.test(iris$Sepal.Length, iris$Species, p.adjust.method = "fdr")
# Chunk 9
# 1) Visualizarlo
ggplot( iris, aes (x =Sepal.Length, y=Species, fill = Species)) + geom_boxplot()
#fill--> rellenarcolor por especies
# 2) Su hay contrastes, especificarlos
#¿Hay diferencias entre la especie setosa y las especies V?
contrasts(iris$Species)
#comparar setosa cion las otras dos: cambiar el orden
#mu_setosa - 0.5*mu_versicolor + 0.5*mu_virginica
c(1, -0.5, -0.5)
#2º contraste: ¿Hay diferencias entre virginica y versiclor?
#mu_versicolor - mu_virginica = 0
c(0,1,-1)
my_contrast = rbind(
"Setosa-Vs" = c(1, -0.5, -0.5),
"Virginica-Versicolor" = c(0,1,-1)
)
contrasts(iris$Species) = get_contrasts_coding(my_contrasts)
# 3) REGRESIÓN Y ANOVA
model_v= lm(Sepal.Length~Species, iris)
library("car")
model_v_aov = Anova(model_v, type= 3) #3 formas de calcular anova, la mejor type 3
# 4) Contrastes y test-pothoc si son necesarios
summary(model_v)
#especies V 1,25 a la dcha de la especie setosa
#si esto no fuese sufieciente y quiero hacer todas las posibles comparaciones
mpdel_v_aov
model_drigs2 = lm(response_time~sex + drug, drugs_df_2)
m
#¿como puedo modificarla para q tenga en cuneta la interaccion entre sexo y frogas?
model_drigs2 = lm(response_time~sex + drug + sex:drug, drugs_df_2)
summary(
model_drugs2 = lm(response_time~sex + drug, drugs_df_2)
)
summary(
model_drugs2 = lm(response_time~sex + drug, drugs_df_2)
)
#¿como puedo modificarla para q tenga en cuneta la interaccion entre sexo y frogas?
model_drugs2 = lm(response_time~sex + drug + sex:drug, drugs_df_2)
#¡Ojo! A veces cuando un sexo específico se junta con una droga especifica va a
#ocurri magia asiq tenlo en cuenta
summary(model_drugs2)
predict(model_drugs2)
drugs_df_2$preds = predict(model_drugs2)
ggplot(drugs_df_2, aes(x=sex, y=response_time, col=drugs)) +
stat_summary()
ggplot(drugs_df_2, aes(x=sex, y=response_time, col=drug)) +
stat_summary()
ggplot(drugs_df_2, aes(x=sex, y=preds, col=drug)) +
stat_summary() +
stat_summary(geom="line", aes(group = drug))
summary(model_drugs2)
library("ggplot2")
library("car")  # Anova
options(contrasts = c("contr.sum", "contr.poly"))   # ver utils.R
#no hace falta memorizar están en utils.R
data("iris")
# 1) Visualizar
head(iris)
ggplot(iris, aes(x=Species, y = Sepal.Length, fill=Species)) + geom_boxplot()  +
coord_flip()
# 2) Especificar contrastes si tenemos alguna hipótesis específica
source("utils.R")
my_contrasts = rbind(
"V - setosa" = c(-1, 0.5, 0.5),
"I - II" = c(0, 1, -1)
)
my_coding = get_contrasts_coding(my_contrasts)
contrasts(iris$Species) = my_coding
contrasts(iris$Species)
v_model = lm(Sepal.Length ~ Species, iris)
# 3) Correr ANOVA: test omnibus
v_model_aov = Anova(v_model, type = 3)
head(iris)
ggplot(iris, aes(x=Species, y = Sepal.Length, fill=Species)) + geom_boxplot()  +
coord_flip()
contrasts(iris$Species)
# 3) Correr ANOVA: test omnibus
v_model_aov = Anova(v_model, type = 3)
eta_squared(v_model_aov)  # o effectsize(v_model_aov)
# 4.a)
summary(v_model)
confint(v_model)
# Bonferroni es bastante conservador, pero es un ajuste muy conocido
pairwise.t.test(iris$Sepal.Length, iris$Species, p.adjust.method = "bonferroni")
ggplot(anxiety, aes(y=posttest, x=pretest, col=group))+ geom_point() +geom_boxplot()
source("utils.R")
library("car")
library("ggplot2")
library(readr)
anxiety <- read_csv("data/data/anxiety.csv")
View(anxiety)
# 1) Vis...
ggplot(anxiety, aes(y=posttest-pretest, x=group))+ geom_boxplot() #diferencia de post y pre
ggplot(anxiety, aes(y=posttest, x=pretest, col=group))+ geom_point() +geom_boxplot()
# 2) Contrates
# No tenemos hipótesis :(
# 3) Anova + asunciones
# anxiety_lm = lm(posttest-pretest ~group, anxiety)
anxiety_lm = lm(posttest~pretest +group, anxiety)
#summary(anxiety_lm)
#1.02775: por cada punto adicional de pretest, hay 1.02 puntos adicionales de posttest
# posttest =-2.14 + 1.02*posttest + 1.20*group1 + 0.57*group2
#posttest(grupo3) = -2.14 + 1.02*pretest
#no nos permite comparar grupo 1 y grupo 2 para ello:
anxiety_aov = Anova(anxiety_lm, type = 3)
#p-valor significativo, tidis los grupos son diferentes
# 4) Posthoc tests!
pairwise.t.test(anxiety$posttest, anxiety$group, p.adjust.method = "bonferroni")
#comparar niveles de posttest para cada uno de estos grupos
#esta MAL --> en el dibujo, debe ser relevante el nivel pretest
summary(anxiety_lm)
# 4) Posthoc tests!
pairwise.t.test(anxiety$posttest, anxiety$group, p.adjust.method = "bonferroni")
library("emmeans")
group_means = emmeans(anxiety_lm, "group")
pairs(
group_means,
adjust="tukey"
#infer = c(TRUE, TRUE)
)
#grupo uno distinto del grupo 2 --> pvalor pequeño
#grupo 1 mucho mas distinto q el grupo 3 (casi 3 veces mas)
#grupo 2 y 3 casi 2,33 mas q el 3
# Versus... (¡no usar esto! Es solo por comparación)
# pairwise.t.test(anxiety$posttest, anxiety$group, p.adjust.method = "bonferroni")
# ggplot(anxiety, aes(x=group, y=posttest, fill=group)) + geom_boxplot()
```{r}
library(readr)
drugs_1 <- read_csv("data/data/drugs_1.csv")
View(drugs_1)
#1º) visualizar
drugs_1$drug = factor(drugs_1$drug)
drugs_1$sex = factor(drugs_1$sex)
ggplot(drugs_1, aes(x=drug, y=response_time, col=sex)) +
#sustituir puntitos por puntos q represente su media + linea q represente desviacion
stat_summary() +
stat_summary(geom='line', aes(group= sex)) #unir estas lineas por sexo
View(group_means)
drugs_model_1 = lm(response_time ~ sex + drug, data = drugs_1)
drugs_1$predictions = predict(drugs_model_1)
#dibujar predicciones
ggplot(drugs_1, aes(x=sex, y=predictions, col=drug)) +
stat_summary() +
stat_summary(geom='line', aes(group=drug))
#modelo con INTERACCIONES: líneas no paralelas
source("utils.R")
drugs_df_2 = read.csv("data/data/drugs_2.csv")
drugs_df_2 = mutate(drugs_df_2, drug = factor(drug), sex = factor(sex))
#modelo con INTERACCIONES: líneas no paralelas
source("utils.R")
drugs_df_2 = read.csv("data/data/drugs_2.csv")
drugs_df_2 = mutate(drugs_df_2, drug = factor(drug), sex = factor(sex))
# interaction.plot(drugs_df$sex, drugs_df$drug, response = drugs_df$response_time)
ggplot(drugs_df_2, aes(x=sex, y=response_time, col=drug)) +
stat_summary() +
stat_summary(geom='line', aes(group=drug))
drugs_df_2 = mutate(drugs_df_2, drug = factor(drug), sex = factor(sex))
?mutate()
drugs_df_2 = mutate(drugs_df_2, drug = factor(drug), sex = factor(sex))
?mutate()
library(dplyr)
drugs_df_2 = mutate(drugs_df_2, drug = factor(drug), sex = factor(sex))
#modelo con INTERACCIONES: líneas no paralelas
source("utils.R")
drugs_df_2 = read.csv("data/data/drugs_2.csv")
library(dplyr)
drugs_df_2 = mutate(drugs_df_2, drug = factor(drug), sex = factor(sex))
# interaction.plot(drugs_df$sex, drugs_df$drug, response = drugs_df$response_time)
ggplot(drugs_df_2, aes(x=sex, y=response_time, col=drug)) +
stat_summary() +
stat_summary(geom='line', aes(group=drug))
#a los hombres les sientan muy mal la droga A, hay una interaccion entre la droga A y el sexo
#si repito el análisis como lo hemos ido haciendo (predicciones, las dubjo)
drugs_model_2 = lm(response_time ~ sex + drug, data = drugs_df_2)
drugs_df_2$predictions = predict(drugs_model_2)
ggplot(drugs_df_2, aes(x=sex, y=predictions, col=drug)) +
stat_summary() +
stat_summary(geom='line', aes(group=drug))
#PREDICCIONES paralelas --> erróneas (nuestro modelo solo sabe hacer
#predicciones cuandno no hay interacciones)
summary(
model_drugs2 = lm(response_time~sex + drug, drugs_df_2)
)
drugs_model_2 = lm(response_time ~ sex + drug, data = drugs_df_2)
drugs_df_2$predictions = predict(drugs_model_2)
ggplot(drugs_df_2, aes(x=sex, y=predictions, col=drug)) +
stat_summary() +
stat_summary(geom='line', aes(group=drug))
#PREDICCIONES paralelas --> erróneas (nuestro modelo solo sabe hacer
#predicciones cuandno no hay interacciones)
summary(
model_drugs2 = lm(response_time~sex + drug, drugs_df_2)
)
source("utils.R")
drugs_df_2 = read.csv("data/data/drugs_2.csv")
library(dplyr)
drugs_df_2 = mutate(drugs_df_2, drug = factor(drug), sex = factor(sex))
summary(
model_drugs2 = lm(response_time~sex + drug, drugs_df_2)
)
lm(response_time~sex + drug, drugs_df_2)
summary(
model_drugs2 = lm(response_time~sex + drug, drugs_df_2)
)
m(response_time~sex + drug, drugs_df_2)
summary(
model_drugs2 = lm(response_time~sex + drug, drugs_df_2)
)
summary(
model_drugs2 = lm(response_time~sex + drug, drugs_df_2)
)
drugs_model_2 = lm(response_time ~ sex * drug, data = drugs_df_2) #forma
#¿como puedo modificarla para q tenga en cuenta la interaccion entre sexo y drogas?
model_drugs2 = lm(response_time~sex + drug + sex:drug, drugs_df_2)
summary(model_drugs2)
drugs_df_2$preds = predict(model_drugs2)
ggplot(drugs_df_2, aes(x=sex, y=preds, col=drug)) +
stat_summary() +
stat_summary(geom="line", aes(group = drug))
knitr::opts_chunk$set(echo = TRUE)
var(iq_spanish$iq)
library(readr)
library(readr)
iq_spanish <- read_csv("data_2/data_2/iq_spanish.csv")
library(readr)
iq_spanish <- read_csv("data_2/data_2/iq_spanish.csv")
#2) Estadistico de contraste
sigma =  sd(iq_spanish$iq)
var(iq_spanish$iq)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
ab_testing <- read_csv("data_4/data_4/ab_testing.csv")
ttt=table(ab_testing)
ttt
ttt=table(ab_testing)
exito_new = ttt[1,2]
exito_old= ttt[2,2]
vec_x = c(exito_new, exito_old)
prop.test(vec_x, rowSums(ttt), alternative = "greater")
ttt=table(ab_testing)
ttt
822+820+287+192
rowSums(ttt)
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height )) + geom_histogram(bins = numbins)
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height )) + geom_histogram(bins = numbins)
# tiene una DISTRIB NORMAL
#Diferenciar  MUJERES y HOMBRES
#Los datos categóricos se deben codificar como factores
#Columna "male": si es hombre 1, sino 0
#Tengo q convertir mi columna "male" a tipo factor
howell_adult$male = as.factor(howell_adult$male)
ggplot(howell_adult, aes(x =height, col=male)) + geom_histogram(bins = numbins)
#Nueva geometría: densidad (para representar mejor dos poblaciones)
ggplot(howell_adult, aes(x =height, col=male)) + geom_density()
print("ambos datos tienen una distribución normal")
#Comprobar independencia para cada población
#Población infinita o muestreo sin reemplazamiento
nrow(howell_adult) #352 muestras
print("puesto q 350 personas << población objetivo, luego asumimos independencia")
#Comprobar independecia X entre Y
print("es razonable asumir que la altura de los hombres no afecta a la de las mujeres")
#Ha: mu_x != mu_y --> mu_x - mu_y != 0 (dos colas)
men = howell_adult[howell_adult$male == 1, ]
women = howell_adult[howell_adult$male == 0, ]
my_test = t.test(men$height, women$height,
alternative = "two.sided",
mu = 0) #IMPORTA el orden de los datos
my_test
#Si damos primero women$ y después men$ nos dará la media en negativo
print("pvalor es muy muy bajo, los datos apoyan Ha")
print("Los datos apoyan que la altura de los hombres es distinta a la de las mujeres")
#el intervalo de confianza; es una estimación  entre las diferencias de alturas
print("La altura de los hombres está entre 9.5 y 12cm más que la de las mujeres")
#CALCULAR EL TAMAÑO DEL EFECTO
effectsize(my_test)
#tamaño del efecto: cohens_d = 1,95[tamaño grande según enlace]
print("puesto que el tamaño del efecto es muy grande,
los resultados son MUY RELEVANTES")
library("emmeans")
group_means = emmeans(anxiety_lm, "group")
pairs(
group_means,
adjust="tukey"
)
#grupo uno distinto del grupo 2 --> pvalor pequeño
#grupo 1 mucho mas distinto q el grupo 3 (casi 3 veces mas)
#grupo 2 y 3 casi 2,33 mas q el 3
# Versus... (¡no usar esto! Es solo por comparación)
# pairwise.t.test(anxiety$posttest, anxiety$group, p.adjust.method = "bonferroni")
# ggplot(anxiety, aes(x=group, y=posttest, fill=group)) + geom_boxplot()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# install.packages(
#  c("afex", "emmeans")
# )
# Chunk 3
library("tidyverse")
library("easystats") # carga performance y effectsize
theme_set(theme_bw())  # cambia el tema de ggplot
# Chunk 4
library("ggplot2")
library("car")  # Anova
options(contrasts = c("contr.sum", "contr.poly"))   # ver utils.R
#no hace falta memorizar están en utils.R
data("iris")
# 1) Visualizar
head(iris)
ggplot(iris, aes(x=Species, y = Sepal.Length, fill=Species)) + geom_boxplot()  +
coord_flip()
# 2) Especificar contrastes si tenemos alguna hipótesis específica
source("utils.R")
my_contrasts = rbind(
"V - setosa" = c(-1, 0.5, 0.5),
"I - II" = c(0, 1, -1)
)
my_coding = get_contrasts_coding(my_contrasts)
contrasts(iris$Species) = my_coding
contrasts(iris$Species)
v_model = lm(Sepal.Length ~ Species, iris)
# 3) Correr ANOVA: test omnibus
v_model_aov = Anova(v_model, type = 3)
# Chunk 5
eta_squared(v_model_aov)  # o effectsize(v_model_aov)
omega_squared(v_model_aov) # omega-squared se supone que está menos sesgado que eta_squared
# Chunk 6
# 4.a)
summary(v_model)
confint(v_model)
# Chunk 7
# Bonferroni es bastante conservador, pero es un ajuste muy conocido
pairwise.t.test(iris$Sepal.Length, iris$Species, p.adjust.method = "bonferroni")
#compraa virginica con versiocolor: 8.3e-09 pvalor
#Usa ttest para comparar versicolor y setosa, otro para virginica y setosa y
#otro parea versicolor y virginica
#Quiero un n ivel del significacion del 95%: fallar el 5% de las veces
#Estamos haciendo aqui muchas comparaciones --> el error comparado es 5%
# Chunk 8
# Los métodos fdr son "BH" (aka "fdr") and "BY".
pairwise.t.test(iris$Sepal.Length, iris$Species, p.adjust.method = "fdr")
# Chunk 9
# 1) Visualizarlo
ggplot( iris, aes (x =Sepal.Length, y=Species, fill = Species)) + geom_boxplot()
#fill--> rellenarcolor por especies
# 2) Su hay contrastes, especificarlos
#¿Hay diferencias entre la especie setosa y las especies V?
contrasts(iris$Species)
#comparar setosa cion las otras dos: cambiar el orden
#mu_setosa - 0.5*mu_versicolor + 0.5*mu_virginica
c(1, -0.5, -0.5)
#2º contraste: ¿Hay diferencias entre virginica y versiclor?
#mu_versicolor - mu_virginica = 0
c(0,1,-1)
my_contrast = rbind(
"Setosa-Vs" = c(1, -0.5, -0.5),
"Virginica-Versicolor" = c(0,1,-1)
)
contrasts(iris$Species) = get_contrasts_coding(my_contrasts)
# 3) REGRESIÓN Y ANOVA
model_v= lm(Sepal.Length~Species, iris)
library("car")
model_v_aov = Anova(model_v, type= 3) #3 formas de calcular anova, la mejor type 3
# 4) Contrastes y test-pothoc si son necesarios
summary(model_v)
#especies V 1,25 a la dcha de la especie setosa
#si esto no fuese sufieciente y quiero hacer todas las posibles comparaciones
model_v_aov
#como p-vallor <2.2e... el test ANOVA nos indica que existe alguna diferencia
#entre los sepalos de las especies
pairwise.t.test(iris$Sepal.Length, iris$Species,
p.adjust.method = "bonferroni")
#En este caso, los sepalos de las especies son todas distintas entre si
# 5) comprobar asunciones:
#5.1) regresion
library("performance")
is_normal = check_normality(model_v)
plot(is_norm, type="qq") #la mayoria se deberia de quedar dentro de la linea
#5.2) Homogeneidad de la varianza
check_homogeneity(model_v)
#warning: hay una o varias cajitas con una anchura
#distinta lo cual nos hace ver q todos los test posthoc a la basura
#los p-valores pueden ser realmente más grande.
# Chunk 10
library("emmeans")
v_model_emms = emmeans(v_model, "Species")
pairs(v_model_emms, adjust="bonferroni", infer=c(TRUE, TRUE))
pairs(v_model_emms, adjust="fdr", infer = c(TRUE, TRUE))
# una de las ventajas de emmeans es que podemos calcular tamaños de efecto
# para las medias aunque, tal y como se menciona en la documentación:
# "there is substantial disagreement among practitioners on what is the appropriate
# sigma to use in computing effect sizes; or, indeed, whether any effect-size
# measure is appropriate for some situations"
eff_size(v_model_emms, sigma = sigma(v_model), edf = 147)
# Chunk 11
v_model_means = emmeans(v_model, "Species")
contrast(v_model_means, method = list('V-Setosa' = c(-1, 0.5, 0.5), 'I - II' = c(0, 1, -1)),
infer = c(TRUE, TRUE))
# Chunk 12
plot(v_model, which = c(1, 2), ask=FALSE)
# o bien
plot(check_normality(v_model), type = "qq", detrend = TRUE)
check_homogeneity(v_model) # oooooohhhhhhh nooooooooooooo :(
# Chunk 13
source("utils.R")
library("car")
library("ggplot2")
library(readr)
anxiety <- read_csv("data/data/anxiety.csv")
View(anxiety)
# 1) Vis...
ggplot(anxiety, aes(y=posttest-pretest, x=group))+ geom_boxplot() #diferencia de post y pre
ggplot(anxiety, aes(y=posttest, x=pretest, col=group))+ geom_point() +geom_boxplot()
# 2) Contrates
# No tenemos hipótesis :(
# 3) Anova + asunciones
# anxiety_lm = lm(posttest-pretest ~group, anxiety)
anxiety_lm = lm(posttest~pretest +group, anxiety)
#summary(anxiety_lm)
#1.02775: por cada punto adicional de pretest, hay 1.02 puntos adicionales de posttest
# posttest =-2.14 + 1.02*posttest + 1.20*group1 + 0.57*group2
#posttest(grupo3) = -2.14 + 1.02*pretest
#no nos permite comparar grupo 1 y grupo 2 para ello:
anxiety_aov = Anova(anxiety_lm, type = 3)
#p-valor significativo, tidis los grupos son diferentes
# 4) Posthoc tests!
pairwise.t.test(anxiety$posttest, anxiety$group, p.adjust.method = "bonferroni")
#comparar niveles de posttest para cada uno de estos grupos
#esta MAL --> en el dibujo, debe ser relevante el nivel pretest
library("emmeans")
group_means = emmeans(anxiety_lm, "group")
pairs(
group_means,
adjust="tukey"
)
#grupo uno distinto del grupo 2 --> pvalor pequeño
#grupo 1 mucho mas distinto q el grupo 3 (casi 3 veces mas)
#grupo 2 y 3 casi 2,33 mas q el 3
# Versus... (¡no usar esto! Es solo por comparación)
# pairwise.t.test(anxiety$posttest, anxiety$group, p.adjust.method = "bonferroni")
# ggplot(anxiety, aes(x=group, y=posttest, fill=group)) + geom_boxplot()
