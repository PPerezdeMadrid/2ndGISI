library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x = heigth)) + geom_histogram(bins = numbins)
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height)) + geom_histogram(bins = numbins)
#NO tiene una DISTRIB NORMAL
howell_adult
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height )) + geom_histogram(bins = numbins)
#NO tiene una DISTRIB NORMAL
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height )) + geom_histogram(bins = numbins)
# tiene una DISTRIB NORMAL
#Diferenciar  MUJERES y HOMBRES
#Los datos categóricos se deben codificar como factores
#Columna "male": si es hombre 1, sino 0
#Tengo q convertir mi columna "male" a tipo factor
howell_adults$male = as.factor(howell_adults$male)
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height )) + geom_histogram(bins = numbins)
# tiene una DISTRIB NORMAL
#Diferenciar  MUJERES y HOMBRES
#Los datos categóricos se deben codificar como factores
#Columna "male": si es hombre 1, sino 0
#Tengo q convertir mi columna "male" a tipo factor
howell_adult$male = as.factor(howell_adult$male)
ggplot(howell_adult, aes(x =height ), col=male) + geom_histogram(bins = numbins)
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height )) + geom_histogram(bins = numbins)
# tiene una DISTRIB NORMAL
#Diferenciar  MUJERES y HOMBRES
#Los datos categóricos se deben codificar como factores
#Columna "male": si es hombre 1, sino 0
#Tengo q convertir mi columna "male" a tipo factor
howell_adult$male = as.factor(howell_adult$male)
ggplot(howell_adult, aes(x =height, col=male)) + geom_histogram(bins = numbins)
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height )) + geom_histogram(bins = numbins)
# tiene una DISTRIB NORMAL
#Diferenciar  MUJERES y HOMBRES
#Los datos categóricos se deben codificar como factores
#Columna "male": si es hombre 1, sino 0
#Tengo q convertir mi columna "male" a tipo factor
howell_adult$male = as.factor(howell_adult$male)
ggplot(howell_adult, aes(x =height, col=male)) + geom_histogram(bins = numbins)
#Numeva geometrñia: densidad (para representar mejor dos poblaciones)
ggplot(howell_adult, aes(x =height, col=male)) + geom_density(bins = numbins)
nrow(howell)
nrow(howell_adult)
?t.test
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height )) + geom_histogram(bins = numbins)
# tiene una DISTRIB NORMAL
#Diferenciar  MUJERES y HOMBRES
#Los datos categóricos se deben codificar como factores
#Columna "male": si es hombre 1, sino 0
#Tengo q convertir mi columna male" a tipo factor
howell_adult$male = as.factor(howell_adult$male)
ggplot(howell_adult, aes(x =height, col=male)) + geom_histogram(bins = numbins)
#Numeva geometrñia: densidad (para representar mejor dos poblaciones)
ggplot(howell_adult, aes(x =height, col=male)) + geom_density()
print("ambos datos tienen una distribución normal")
#Comprobar independencia para cada población
#Población infinita o muestreo sin reemplazamiento
nrow(howell_adult) #352 muestras
print("puesto q 350 personas << población objetivo, luego asumimos independencia")
#Comprobar independecia X entre Y
print("es razonable asumir que la altura de los hombres no afecta a la de las mujeres")
#Ha: mu_x != mu_y --> mu_x - mu_y != 0 (dos colas)
men = howell_adult[howell_adult$male == 1, ]
women = howell_adult[howell_adult$male == 0, ]
t.test(men, women,
alternative = "two.sided",
mu = 0)
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height )) + geom_histogram(bins = numbins)
# tiene una DISTRIB NORMAL
#Diferenciar  MUJERES y HOMBRES
#Los datos categóricos se deben codificar como factores
#Columna "male": si es hombre 1, sino 0
#Tengo q convertir mi columna male" a tipo factor
howell_adult$male = as.factor(howell_adult$male)
ggplot(howell_adult, aes(x =height, col=male)) + geom_histogram(bins = numbins)
#Numeva geometrñia: densidad (para representar mejor dos poblaciones)
ggplot(howell_adult, aes(x =height, col=male)) + geom_density()
print("ambos datos tienen una distribución normal")
#Comprobar independencia para cada población
#Población infinita o muestreo sin reemplazamiento
nrow(howell_adult) #352 muestras
print("puesto q 350 personas << población objetivo, luego asumimos independencia")
#Comprobar independecia X entre Y
print("es razonable asumir que la altura de los hombres no afecta a la de las mujeres")
#Ha: mu_x != mu_y --> mu_x - mu_y != 0 (dos colas)
men = howell_adult[howell_adult$male == 1, ]
women = howell_adult[howell_adult$male == 0, ]
t.test(men$height, women$height,
alternative = "two.sided",
mu = 0)
?effectsize
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#Tenemos que filtrar datos --> SOLO ADULTOS (edad>18)
howell_adult = howell[howell$age >= 18, ]
numbins = nclass.FD(howell_adult$height)
ggplot(howell_adult, aes(x =height )) + geom_histogram(bins = numbins)
# tiene una DISTRIB NORMAL
#Diferenciar  MUJERES y HOMBRES
#Los datos categóricos se deben codificar como factores
#Columna "male": si es hombre 1, sino 0
#Tengo q convertir mi columna male" a tipo factor
howell_adult$male = as.factor(howell_adult$male)
ggplot(howell_adult, aes(x =height, col=male)) + geom_histogram(bins = numbins)
#Numeva geometrñia: densidad (para representar mejor dos poblaciones)
ggplot(howell_adult, aes(x =height, col=male)) + geom_density()
print("ambos datos tienen una distribución normal")
#Comprobar independencia para cada población
#Población infinita o muestreo sin reemplazamiento
nrow(howell_adult) #352 muestras
print("puesto q 350 personas << población objetivo, luego asumimos independencia")
#Comprobar independecia X entre Y
print("es razonable asumir que la altura de los hombres no afecta a la de las mujeres")
#Ha: mu_x != mu_y --> mu_x - mu_y != 0 (dos colas)
men = howell_adult[howell_adult$male == 1, ]
women = howell_adult[howell_adult$male == 0, ]
my_test = t.test(men$height, women$height,
alternative = "two.sided",
mu = 0) #IMPORTA el orden de los datos
my_test
#Si damos primero women$ y despues men$ nos dará la media en negativo
print("pvalor es muy muy bajo, los datos apoyan Ha")
print("Los datos apoyan que la altura de los hombres es distinta a la de las mujeres")
#el intervalo de confianza; es una estimación  entre las diferencias de alturas
print("La altura de los hombres está entre 9.5 y 12cm más que la de las mujeres")
#CALCULAR EL TAMAÑO DEL EFECTO
effectsize(my_test)
#tamaño del efecto: cohens_d = 1,95
t.test(men$height, women$height, alternativa = "two.sided", var.equal = TRUE)
library("tidyverse")
library("effectsize") #necesaria para medias
#Tenemos q cambiar el delimitador --> a ;
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
my_test2 = t.test(men$height, women$height, alternativa = "two.sided", var.equal = TRUE)
# var.equal = asumo q las desviaciones típicas son las mismas
my_test2
effectsize(my_test2)
library("tidyverse")
library("effectsize")
library(readr)
howell <- read_delim("data_3(1)/data_3/howell1.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
library("ggplot2")
#H0:  mu_x - mu_y < 10
#Ha: mu_x - mu_y >= 10
howell_adult = howell[howell$age >= 18, ]
howell_adult$male = as.factor(howell_adult$male)
ggplot(howell_adult, aes(x =height, col=male)) + geom_density()
print("ambos datos tienen una distribución normal")
#Comprobar independencia para cada población
nrow(howell_adult)
print("puesto q 350 personas << población objetivo, luego asumimos independencia")
#Comprobar independecia X entre Y
print("es razonable asumir que la altura de los hombres no afecta a la de las mujeres")
#Ha: Ha: mu_x - mu_y >= 10  (una cola)
men = howell_adult[howell_adult$male == 1, ]
women = howell_adult[howell_adult$male == 0, ]
my_test = t.test(men$height, women$height,
alternative = "grater",
mu = 10)
my_test
#CALCULAR EL TAMAÑO DEL EFECTO
effectsize(my_test)
library(readr)
spain_league <- read_csv("data_4/data_4/spain_league.csv")
View(spain_league)
knitr::opts_chunk$set(echo = TRUE)
esp_20_21 = spain_league[spain_league$Season==2021, ]
esp_20_21 = spain_league[spain_league$Season==2021, ]
View(esp_20_21)
spain_2021 = spain_league[spain_league$Season==2021, ]
spain_2021$hgoal
#Porque no usar los vgoal? para que sean independientes
lamda_est = mean(goles_local)
goles_local = spain_2021$hgoal
#Porque no usar los vgoal? para que sean independientes
lamda_est = mean(goles_local)
#Calcular cuantiles
z = c(z1 = qnorm(0.01), z2 = qnorm(0.99))
z
lamda_est + z *sqrt(lamda_est/length(goles_local))
?prop.test
prop.test(4,80, alternative="less", p=0.5)
library(readr)
ab_testing <- read_csv("data_4/data_4/ab_testing.csv")
View(ab_testing)
library(readr)
ab_testing <- read_csv("data_4/data_4/ab_testing.csv")
View(ab_testing)
ab_testing_nueva
ab_testing_nueva = ab_testing[ab_testing$page_design== "new", ]
ab_testing_nueva
table(ab_testing)
table(ab_testing)[page_design=="new", has_clicked == 1]
table(ab_testing)[ab_testing$page_design=="new", ab_testing$has_clicked == 1]
table(ab_testing)
ttt=table(ab_testing)
ttt[1,2]
ttt[2,2]
ttt=table(ab_testing)
exito_new = ttt[1,2]
exito_old= ttt[2,2]
ttt=table(ab_testing)
length(ttt)
nrow(ab_testing)
prop.test(c(exito_new, exito_old), n = nrow(ab_testing) )
ttt=table(ab_testing)
exito_new = ttt[1,2]
exito_old= ttt[2,2]
vec_x = c(exito_new, exito_old)
prop.test(vec_x, n = length(x_vec) )
prop.test(vec_x, n = length(vec_x) )
prop.test(vec_x, rowSums(ttt))
rowSums(ttt)
prop.test(vec_x, rowSums(ttt), alternative = "greater")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
ab_testing <- read_csv("data_4/data_4/ab_testing.csv")
ab_testing_nueva = ab_testing[ab_testing$page_design== "new", ]
ab_testing_viej = ab_testing[ab_testing$page_design== "old", ]
ttt=table(ab_testing)
exito_new = ttt[1,2]
exito_old= ttt[2,2]
vec_x = c(exito_new, exito_old)
prop.test(vec_x, rowSums(ttt), alternative = "greater")
print("la propabilidad de conversión en la página nueva es al menos
un 3% superior a la página vieja (95%). Debemos cambiar el diseño")
print("dado que el pvalor es casi cero, acogemos la hipótesis alternativa")
install.packages(
c("easystats", "GGally", "qqplotr")
)
library("tidyverse")
library("readr")
theme_set(theme_bw())  # cambia el tema de ggplot
x = seq(-2, 2, 0.1)
expected_behaviour = 2 + 3 * x  # a = 2 y b = 3
epsilon = rnorm(length(x), sd = 1)
y = expected_behaviour + epsilon
df = data.frame('data_x' = x, 'data_y' = y,
'expected' = expected_behaviour)
ggplot(df, aes(x = data_x, y = data_y)) +
geom_point() +
geom_line(aes(y = expected), col = 2)
# OR...
# plot(x, y)
# lines(x, expected_behaviour, col = 2)
df
ggplot(df, aes(x = data_x, y = data_Y)) + geom_point()
ggplot(df, aes(x = data_x, y = data_y)) + geom_point()
?lm()
lm(data_y ~ data_x, data = df)
#¿Como puedo encontrar el "expected behaviour" con datos riudosos?
# 1) crear un modelo lineal
#data_y depende de data_x --> data_y ~ data_x
mi_lm = lm(data_y ~ data_x, data = df)
# 2) Obtener estimaciones de a y b
summary(mi_lm)
data.frame("data_x" = c(3))
# 3) Obtener predicciones del modelo lineal
#Puedo usarlo para hacer predicciones
#Cuanto vale la variable y si x = 3
# y = 2.1199 + 3.0469 *3
predict(mi_lm, data.frame("data_x" = c(3)))
# 3) Obtener predicciones del modelo lineal
#Puedo usarlo para hacer predicciones
#Cuanto vale la variable y si x = 3
# y = 2.1199 + 3.0469 *3
predict(mi_lm, data.frame("data_x" = c(3)))
predict(mi_lm, data.frame("data_x" = c(3)))
predict(mi_lm, data.frame("data_x" = c(3)))
my_new_df = data.frame("data_x" = c(3))
predict(mi_lm, my_new_df)
#Haz predicciones para exactamente el mismo dataframe usado
predict(mi_lm)
#Haz predicciones para exactamente el mismo dataframe usado
predict(mi_lm, interval = "confidence") #por defecto --> dataframe original
# 4) representar la recta
ggplot(df, aes=(x=data_x, y=data_y))+ geom_point() + geom_line(aes(y=expected))
# 4) representar la recta
ggplot(df, aes=(x= data_x, y=data_y))+ geom_point() + geom_line(aes(y=expected))
# 4) representar la recta
ggplot(df, aes(x= data_x, y=data_y))+ geom_point() + geom_line(aes(y=expected))
#sobreescribir columna y (expected--> recta generada) sustir¡tuir atr estetecos
ggplot(df, aes(x= data_x, y=data_y))+ geom_point() + geom_line(aes(y=expected), col = red) + geom_line(aes (y=fit), col = blue)
#sobreescribir columna y (expected--> recta generada) sustir¡tuir atr estetecos
ggplot(df, aes(x= data_x, y=data_y))+ geom_point() + geom_line(aes(y=expected), col=2) + geom_line(aes (y=fit), col =3)
ggplot(df, aes(x= data_x, y=data_y))+ geom_point()
+ geom_line(aes(y=expected), col=2)
+ geom_line(aes(y=expected), col=2) + geom_line(aes (y  =fit), col=3)
#sobreescribir columna y (expected--> recta generada) sustir¡tuir atr estetecos
ggplot(df, aes(x= data_x, y=data_y))+ geom_point() + geom_line(aes(y=expected), col=2) + geom_line(aes (y  =fit), col=3)
library(readr)
hr <- read_table("C:/Users/ppere/Desktop/tema 5/data/data/hr.csv")
View(hr)
library(readr)
hr <- read_table("C:/Users/ppere/Desktop/tema 5/data/data/hr.csv")
data_temp = hr$temperature
data_hr = hr$heart_rate
my_lm2 = lm(data_temp ~ data_hr)
lm(data_temp ~ data_hr)
summary(my_lm2)
# 3) Inferencia
summaty(frog_model)
# 2) Crear un modelo lineal
frog_model = lm(data_hr ~ data_temp) #el hr depende de temp
# 3) Inferencia
summary(frog_model)
# 3) Inferencia
summary(frog_model)
?confint()
confint(frog_model) #
summary(frog_model)
confint(frog_model)
plot(mi_lm, ask = FALSE)
# 1) crear un modelo lineal
naive_model = lm(data_y ~ data_x, data = df)
# 2) obtener estimaciones de a y b
summary(naive_model)
# 3) Obtener predicciones del modelo lineal
preds = predict(naive_model, interval = "confidence")
# 4) visualizar el ajuste
data_and_preds = bind_cols(df, preds)
ggplot(data_and_preds, aes(x = data_x)) +
geom_point(aes(y = data_y)) +
geom_line(aes(y = expected, col = "Expected")) +
geom_line(aes(y = fit, col = "Predicted")) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2, fill = "black")
plot(naive_model, ask = FALSE)
plot(mi_lm, ask = FALSE)
# Comprobar la normalidad con qqplot puede ser difícil. Podemos apoyarnos en
# performance::check_normality
library("performance")
# check_normality corre shapiro.test, pero tal y como resalta la documentación
# "this formal test almost always yields significant results for the distribution
# of residuals and visual inspection (e.g. Q-Q plots) are preferable."
is_norm = check_normality(naive_model)
check_normality(naive_model)
# check_normality corre shapiro.test, pero tal y como resalta la documentación
# "this formal test almost always yields significant results for the distribution
# of residuals and visual inspection (e.g. Q-Q plots) are preferable."
is_norm = check_normality(mi_lml)
# check_normality corre shapiro.test, pero tal y como resalta la documentación
# "this formal test almost always yields significant results for the distribution
# of residuals and visual inspection (e.g. Q-Q plots) are preferable."
is_norm = check_normality(mi_lm)
plot(is_norm, type = "qq", detrend=TRUE)
# Para hacer la inspección visual
plot(is_norm)
plot(is_norm, type = "qq")
plot(is_norm, type = "qq", detrend=TRUE)
# Para hacer la inspección visual
plot(is_norm)
plot(is_norm, type = "qq", detrend=TRUE)
?prop.test
knitr::opts_chunk$set(echo = TRUE)
prop.test(4,80, alternative="less", p=0.5)
library(readr)
weights <- read_csv("C:/Users/ppere/Desktop/2ndo_carrera/estadistica_I/pr2_estad/data/weights.csv")
View(weights)
library(readr)
weights <- read_csv("data/weights.csv")
library(readr)
weights <- read_csv("data/weights.csv")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library("ggplot2")
homeo_weight_loss <- read_csv("data_2/data_2/homeo_weight_loss.csv")
#View(homeo_weight_loss)
media_muestral = mean(homeo_weight_loss$weight_loss_Kg)
# 1) HIPÓTESIS
# H0: gracias a su uso, perderás 2kg
#Ha, H1: el uso del producto no conlleva pérdida de 2kg
#H0: mu = 2 (mu es la pérdida de peso medio)
#Ha: mu != 2
#2) Buscamos un estadístico de contraste
#para adivinar mu, usamos X_gorrito
#X_gorrito ¿? --> N(media, sd^2/n)
#Es independiente --> población infinita (muestra pequeña respecto a la población)
#Observamos histograma --> vemos si tiene distribución normal
num_bins=nclass.FD(homeo_weight_loss$weight_loss_Kg)
ggplot(homeo_weight_loss, aes(x= weight_loss_Kg)) + geom_histogram(bins = num_bins)
# Observo que X es normal y como se cumplen ambas condiciones:
# X_gorrito ¬ N(media, sd^2/n)
#Bajo la H0 (asimos cierta): X_gorrito ¬ N(2, (2,5^2)/50)
#3) Calculamos p-valor (confrontar datos vs H0)
#a) de forma gráfica (dibujar distrib normal N(2, (2,5^2)/50) )
eje_x = seq(0,5, by = 0.01) #porque se q va a estar centrada en 2
eje_y = dnorm(eje_x , mean = 2, sd= sqrt(2.5 ^2 / 50))
plot(eje_x, eje_y, type = "l")
x_mean = mean(homeo_weight_loss$weight_loss_Kg) #0.037
#Dibujamos una linea vertical en 0.037
abline(v = x_mean, col = 2)
#¿ES PROBABLE OBTENER ROJO SI NEGRO ES CIERTO?
#b) calculamos p-valor: prob de obtener un evento tan o más extremo que el observado
#evento observado: 0.037
#más extremo que 0.037--> más a la izq
abline(v = 4 - x_mean, col = 2) #tb muy extremo si están a la dcha
#P(X_gorrito < 0.037 o x > 4-0.037)
# 2 * P(X_gorrito < 0.037 o x > 4-0.037)
#multiplicamos por dos porqq la probabilidad de la izq es la misma que la de la dcha
p_valor = 2 * pnorm(0.037, mean = 2, sd= sqrt(2.5 ^2 / 50) )
#4) comparamos el p-valor con un umbral llamado nicel de significancia: alfa
#Siginficancia alfa: 0.01
#Forma antigua de presentarlo:
# Si p-valor < 0.01 ==> Aceptamos H1, rechazamos H0
# Si p-valor < 0.01 ==> Aceptamos H0, rechazamos H1
#Forma moderna de analizarlo:
# Si p-valor < 0.01 ==> los datos apoyan la H1 mientras que la H0 es poco veraz
# Si p-valor > 0.01 ==> los datos no apoyan la H1 / no hay suficiente evidencia...
print (
"En este caso los datos apoyan que mu != 2kg (NO vas a perder 2kg) "
)
#b) calculamos p-valor: prob de obtener un evento tan o más extremo que el observado
#evento observado: 0.037
#más extremo que 0.037--> más a la izq
abline(v = 4 - x_mean, col = 2) #tb muy extremo si están a la dcha
